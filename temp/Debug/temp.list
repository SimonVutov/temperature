
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc0  08003cc0  00004cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc8  08003cc8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc8  08003cc8  00004cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ccc  08003ccc  00004ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003cd0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000005c  08003d2c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003d2c  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dc3  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001595  00000000  00000000  0000ce4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052b  00000000  00000000  0000eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f96  00000000  00000000  0000efdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009507  00000000  00000000  0002ff71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c85ad  00000000  00000000  00039478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101a25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d8  00000000  00000000  00101a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00103b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080039f4 	.word	0x080039f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080039f4 	.word	0x080039f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Initialize the HAL Library */
  HAL_Init();
 8000de0:	f000 fc32 	bl	8001648 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 fa54 	bl	8001290 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f000 fabc 	bl	8001364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dec:	f000 faec 	bl	80013c8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "DHT22 Temperature Reader Initialized\r\n");
 8000df0:	4923      	ldr	r1, [pc, #140]	@ (8000e80 <main+0xa4>)
 8000df2:	4824      	ldr	r0, [pc, #144]	@ (8000e84 <main+0xa8>)
 8000df4:	f002 f95e 	bl	80030b4 <siprintf>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <main+0xac>)
 8000dfe:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <main+0xac>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	491e      	ldr	r1, [pc, #120]	@ (8000e84 <main+0xa8>)
 8000e0c:	481f      	ldr	r0, [pc, #124]	@ (8000e8c <main+0xb0>)
 8000e0e:	f001 fd95 	bl	800293c <HAL_UART_Transmit>

  /* Infinite loop */
  while (1)
  {
    // Attempt to read temperature from DHT22
    if (DHT22_ReadTemperature(DHT22_GPIO_PORT, DHT22_GPIO_PIN, &temperature) == 0) {
 8000e12:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <main+0xb4>)
 8000e14:	2140      	movs	r1, #64	@ 0x40
 8000e16:	481f      	ldr	r0, [pc, #124]	@ (8000e94 <main+0xb8>)
 8000e18:	f000 f842 	bl	8000ea0 <DHT22_ReadTemperature>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d118      	bne.n	8000e54 <main+0x78>
      // Successfully read temperature
      uart_buf_len = sprintf(uart_buf, "Temperature: %.2f°C\r\n", temperature);
 8000e22:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <main+0xb4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fba6 	bl	8000578 <__aeabi_f2d>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4919      	ldr	r1, [pc, #100]	@ (8000e98 <main+0xbc>)
 8000e32:	4814      	ldr	r0, [pc, #80]	@ (8000e84 <main+0xa8>)
 8000e34:	f002 f93e 	bl	80030b4 <siprintf>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <main+0xac>)
 8000e3e:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <main+0xac>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	490e      	ldr	r1, [pc, #56]	@ (8000e84 <main+0xa8>)
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <main+0xb0>)
 8000e4e:	f001 fd75 	bl	800293c <HAL_UART_Transmit>
 8000e52:	e010      	b.n	8000e76 <main+0x9a>
    } else {
      // Failed to read temperature
      uart_buf_len = sprintf(uart_buf, "Failed to read temperature\r\n");
 8000e54:	4911      	ldr	r1, [pc, #68]	@ (8000e9c <main+0xc0>)
 8000e56:	480b      	ldr	r0, [pc, #44]	@ (8000e84 <main+0xa8>)
 8000e58:	f002 f92c 	bl	80030b4 <siprintf>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <main+0xac>)
 8000e62:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <main+0xac>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	4905      	ldr	r1, [pc, #20]	@ (8000e84 <main+0xa8>)
 8000e70:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <main+0xb0>)
 8000e72:	f001 fd63 	bl	800293c <HAL_UART_Transmit>
    }

    // Wait 2 seconds before the next reading
    HAL_Delay(2000);
 8000e76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e7a:	f000 fc57 	bl	800172c <HAL_Delay>
    if (DHT22_ReadTemperature(DHT22_GPIO_PORT, DHT22_GPIO_PIN, &temperature) == 0) {
 8000e7e:	e7c8      	b.n	8000e12 <main+0x36>
 8000e80:	08003a0c 	.word	0x08003a0c
 8000e84:	200000c0 	.word	0x200000c0
 8000e88:	20000124 	.word	0x20000124
 8000e8c:	20000078 	.word	0x20000078
 8000e90:	20000128 	.word	0x20000128
 8000e94:	40020000 	.word	0x40020000
 8000e98:	08003a34 	.word	0x08003a34
 8000e9c:	08003a4c 	.word	0x08003a4c

08000ea0 <DHT22_ReadTemperature>:
  * @param GPIO_Pin GPIO Pin (e.g., GPIO_PIN_6)
  * @param temperature Pointer to store the temperature value
  * @retval 0 if successful, 1 if there is an error
  */
int DHT22_ReadTemperature(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, float *temperature)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	@ 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	817b      	strh	r3, [r7, #10]
  uint8_t data[5] = {0}; // Buffer to store 40 bits (5 bytes) of DHT22 data
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint32_t time_us;

  uart_buf_len = sprintf(uart_buf, "Step 1: Sending start signal to DHT22...\r\n");
 8000eb8:	4973      	ldr	r1, [pc, #460]	@ (8001088 <DHT22_ReadTemperature+0x1e8>)
 8000eba:	4874      	ldr	r0, [pc, #464]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000ebc:	f002 f8fa 	bl	80030b4 <siprintf>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b72      	ldr	r3, [pc, #456]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000ec6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000ec8:	4b71      	ldr	r3, [pc, #452]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	496e      	ldr	r1, [pc, #440]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000ed4:	486f      	ldr	r0, [pc, #444]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8000ed6:	f001 fd31 	bl	800293c <HAL_UART_Transmit>

  // Step 1: Send Start Signal
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET); // Pull data pin low
 8000eda:	897b      	ldrh	r3, [r7, #10]
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 fed9 	bl	8001c98 <HAL_GPIO_WritePin>
  HAL_Delay(DHT22_START_SIGNAL_DELAY);               // Wait for at least 20ms
 8000ee6:	2014      	movs	r0, #20
 8000ee8:	f000 fc20 	bl	800172c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);  // Pull data pin high
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f000 fed0 	bl	8001c98 <HAL_GPIO_WritePin>
  HAL_Delay(1);                                      // Wait 1ms
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f000 fc17 	bl	800172c <HAL_Delay>

  uart_buf_len = sprintf(uart_buf, "Start signal sent. Switching to input mode.\r\n");
 8000efe:	4966      	ldr	r1, [pc, #408]	@ (8001098 <DHT22_ReadTemperature+0x1f8>)
 8000f00:	4862      	ldr	r0, [pc, #392]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000f02:	f002 f8d7 	bl	80030b4 <siprintf>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b61      	ldr	r3, [pc, #388]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000f0c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f0e:	4b60      	ldr	r3, [pc, #384]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	495c      	ldr	r1, [pc, #368]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000f1a:	485e      	ldr	r0, [pc, #376]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8000f1c:	f001 fd0e 	bl	800293c <HAL_UART_Transmit>

  // Step 2: Switch GPIO to input mode
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000f30:	897b      	ldrh	r3, [r7, #10]
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 fcfc 	bl	8001940 <HAL_GPIO_Init>

  // Step 3: Wait for DHT22 Response
  uart_buf_len = sprintf(uart_buf, "Waiting for DHT22 response...\r\n");
 8000f48:	4954      	ldr	r1, [pc, #336]	@ (800109c <DHT22_ReadTemperature+0x1fc>)
 8000f4a:	4850      	ldr	r0, [pc, #320]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000f4c:	f002 f8b2 	bl	80030b4 <siprintf>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b4e      	ldr	r3, [pc, #312]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000f56:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f58:	4b4d      	ldr	r3, [pc, #308]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	494a      	ldr	r1, [pc, #296]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000f64:	484b      	ldr	r0, [pc, #300]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8000f66:	f001 fce9 	bl	800293c <HAL_UART_Transmit>

  time_us = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000f6e:	e019      	b.n	8000fa4 <DHT22_ReadTemperature+0x104>
    time_us++;
 8000f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f72:	3301      	adds	r3, #1
 8000f74:	637b      	str	r3, [r7, #52]	@ 0x34
    if (time_us > DHT22_RESPONSE_TIMEOUT) {
 8000f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f78:	4a49      	ldr	r2, [pc, #292]	@ (80010a0 <DHT22_ReadTemperature+0x200>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d912      	bls.n	8000fa4 <DHT22_ReadTemperature+0x104>
      uart_buf_len = sprintf(uart_buf, "Error: Timeout waiting for DHT22 response.\r\n");
 8000f7e:	4949      	ldr	r1, [pc, #292]	@ (80010a4 <DHT22_ReadTemperature+0x204>)
 8000f80:	4842      	ldr	r0, [pc, #264]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000f82:	f002 f897 	bl	80030b4 <siprintf>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b41      	ldr	r3, [pc, #260]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000f8c:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f8e:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	493c      	ldr	r1, [pc, #240]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000f9a:	483e      	ldr	r0, [pc, #248]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8000f9c:	f001 fcce 	bl	800293c <HAL_UART_Transmit>
      return 1; // Timeout waiting for DHT22 response
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e15f      	b.n	8001264 <DHT22_ReadTemperature+0x3c4>
  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 fe5d 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d0dd      	beq.n	8000f70 <DHT22_ReadTemperature+0xd0>
    }
  }

  uart_buf_len = sprintf(uart_buf, "DHT22 response detected. Reading data...\r\n");
 8000fb4:	493c      	ldr	r1, [pc, #240]	@ (80010a8 <DHT22_ReadTemperature+0x208>)
 8000fb6:	4835      	ldr	r0, [pc, #212]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000fb8:	f002 f87c 	bl	80030b4 <siprintf>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000fc4:	4b32      	ldr	r3, [pc, #200]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	492f      	ldr	r1, [pc, #188]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000fd0:	4830      	ldr	r0, [pc, #192]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8000fd2:	f001 fcb3 	bl	800293c <HAL_UART_Transmit>

  // Step 4: Read 40 bits (5 bytes) of data
  for (int i = 0; i < 40; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fda:	e0b9      	b.n	8001150 <DHT22_ReadTemperature+0x2b0>
    uart_buf_len = sprintf(uart_buf, "Reading bit %d...\r\n", i);
 8000fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fde:	4933      	ldr	r1, [pc, #204]	@ (80010ac <DHT22_ReadTemperature+0x20c>)
 8000fe0:	482a      	ldr	r0, [pc, #168]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000fe2:	f002 f867 	bl	80030b4 <siprintf>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000fec:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	4924      	ldr	r1, [pc, #144]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8000ffa:	4826      	ldr	r0, [pc, #152]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8000ffc:	f001 fc9e 	bl	800293c <HAL_UART_Transmit>

    // Wait for LOW signal
    time_us = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 8001004:	e01a      	b.n	800103c <DHT22_ReadTemperature+0x19c>
      time_us++;
 8001006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001008:	3301      	adds	r3, #1
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (time_us > DHT22_BIT_TIMEOUT) {
 800100c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800100e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001012:	d913      	bls.n	800103c <DHT22_ReadTemperature+0x19c>
        uart_buf_len = sprintf(uart_buf, "Error: Timeout waiting for bit %d start.\r\n", i);
 8001014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001016:	4926      	ldr	r1, [pc, #152]	@ (80010b0 <DHT22_ReadTemperature+0x210>)
 8001018:	481c      	ldr	r0, [pc, #112]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 800101a:	f002 f84b 	bl	80030b4 <siprintf>
 800101e:	4603      	mov	r3, r0
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8001024:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4916      	ldr	r1, [pc, #88]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8001034:	f001 fc82 	bl	800293c <HAL_UART_Transmit>
        return 1; // Timeout waiting for bit start
 8001038:	2301      	movs	r3, #1
 800103a:	e113      	b.n	8001264 <DHT22_ReadTemperature+0x3c4>
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 800103c:	897b      	ldrh	r3, [r7, #10]
 800103e:	4619      	mov	r1, r3
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 fe11 	bl	8001c68 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0dc      	beq.n	8001006 <DHT22_ReadTemperature+0x166>
      }
    }

    // Measure HIGH duration
    time_us = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8001050:	e032      	b.n	80010b8 <DHT22_ReadTemperature+0x218>
      time_us++;
 8001052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001054:	3301      	adds	r3, #1
 8001056:	637b      	str	r3, [r7, #52]	@ 0x34
      if (time_us > DHT22_BIT_TIMEOUT) {
 8001058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800105e:	d92b      	bls.n	80010b8 <DHT22_ReadTemperature+0x218>
        uart_buf_len = sprintf(uart_buf, "Error: Timeout measuring bit %d signal.\r\n", i);
 8001060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001062:	4914      	ldr	r1, [pc, #80]	@ (80010b4 <DHT22_ReadTemperature+0x214>)
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 8001066:	f002 f825 	bl	80030b4 <siprintf>
 800106a:	4603      	mov	r3, r0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8001070:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <DHT22_ReadTemperature+0x1f0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	4903      	ldr	r1, [pc, #12]	@ (800108c <DHT22_ReadTemperature+0x1ec>)
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <DHT22_ReadTemperature+0x1f4>)
 8001080:	f001 fc5c 	bl	800293c <HAL_UART_Transmit>
        return 1; // Timeout measuring bit signal
 8001084:	2301      	movs	r3, #1
 8001086:	e0ed      	b.n	8001264 <DHT22_ReadTemperature+0x3c4>
 8001088:	08003a6c 	.word	0x08003a6c
 800108c:	200000c0 	.word	0x200000c0
 8001090:	20000124 	.word	0x20000124
 8001094:	20000078 	.word	0x20000078
 8001098:	08003a98 	.word	0x08003a98
 800109c:	08003ac8 	.word	0x08003ac8
 80010a0:	00989680 	.word	0x00989680
 80010a4:	08003ae8 	.word	0x08003ae8
 80010a8:	08003b18 	.word	0x08003b18
 80010ac:	08003b44 	.word	0x08003b44
 80010b0:	08003b58 	.word	0x08003b58
 80010b4:	08003b84 	.word	0x08003b84
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80010b8:	897b      	ldrh	r3, [r7, #10]
 80010ba:	4619      	mov	r1, r3
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fdd3 	bl	8001c68 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d0c4      	beq.n	8001052 <DHT22_ReadTemperature+0x1b2>
      }
    }

    // If HIGH > 40us, it's a '1'
    data[i / 8] <<= 1;
 80010c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da00      	bge.n	80010d0 <DHT22_ReadTemperature+0x230>
 80010ce:	3307      	adds	r3, #7
 80010d0:	10db      	asrs	r3, r3, #3
 80010d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80010d6:	443a      	add	r2, r7
 80010d8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80010dc:	0052      	lsls	r2, r2, #1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	3338      	adds	r3, #56	@ 0x38
 80010e2:	443b      	add	r3, r7
 80010e4:	f803 2c10 	strb.w	r2, [r3, #-16]
    if (time_us > 40) {
 80010e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ea:	2b28      	cmp	r3, #40	@ 0x28
 80010ec:	d910      	bls.n	8001110 <DHT22_ReadTemperature+0x270>
      data[i / 8] |= 1;
 80010ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da00      	bge.n	80010f6 <DHT22_ReadTemperature+0x256>
 80010f4:	3307      	adds	r3, #7
 80010f6:	10db      	asrs	r3, r3, #3
 80010f8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80010fc:	443a      	add	r2, r7
 80010fe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	3338      	adds	r3, #56	@ 0x38
 800110a:	443b      	add	r3, r7
 800110c:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    uart_buf_len = sprintf(uart_buf, "Bit %d successfully read: %d\r\n", i, (data[i / 8] & 1));
 8001110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001112:	2b00      	cmp	r3, #0
 8001114:	da00      	bge.n	8001118 <DHT22_ReadTemperature+0x278>
 8001116:	3307      	adds	r3, #7
 8001118:	10db      	asrs	r3, r3, #3
 800111a:	3338      	adds	r3, #56	@ 0x38
 800111c:	443b      	add	r3, r7
 800111e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001128:	4950      	ldr	r1, [pc, #320]	@ (800126c <DHT22_ReadTemperature+0x3cc>)
 800112a:	4851      	ldr	r0, [pc, #324]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 800112c:	f001 ffc2 	bl	80030b4 <siprintf>
 8001130:	4603      	mov	r3, r0
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 8001136:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8001138:	4b4e      	ldr	r3, [pc, #312]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	494b      	ldr	r1, [pc, #300]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 8001144:	484c      	ldr	r0, [pc, #304]	@ (8001278 <DHT22_ReadTemperature+0x3d8>)
 8001146:	f001 fbf9 	bl	800293c <HAL_UART_Transmit>
  for (int i = 0; i < 40; i++) {
 800114a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800114c:	3301      	adds	r3, #1
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001152:	2b27      	cmp	r3, #39	@ 0x27
 8001154:	f77f af42 	ble.w	8000fdc <DHT22_ReadTemperature+0x13c>
  }

  uart_buf_len = sprintf(uart_buf, "Verifying checksum...\r\n");
 8001158:	4948      	ldr	r1, [pc, #288]	@ (800127c <DHT22_ReadTemperature+0x3dc>)
 800115a:	4845      	ldr	r0, [pc, #276]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 800115c:	f001 ffaa 	bl	80030b4 <siprintf>
 8001160:	4603      	mov	r3, r0
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b43      	ldr	r3, [pc, #268]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 8001166:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8001168:	4b42      	ldr	r3, [pc, #264]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	493f      	ldr	r1, [pc, #252]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 8001174:	4840      	ldr	r0, [pc, #256]	@ (8001278 <DHT22_ReadTemperature+0x3d8>)
 8001176:	f001 fbe1 	bl	800293c <HAL_UART_Transmit>

  // Step 5: Verify Checksum
  if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 800117a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800117e:	461a      	mov	r2, r3
 8001180:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001184:	4619      	mov	r1, r3
 8001186:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800118a:	440b      	add	r3, r1
 800118c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8001190:	440b      	add	r3, r1
 8001192:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8001196:	440b      	add	r3, r1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	429a      	cmp	r2, r3
 800119c:	d012      	beq.n	80011c4 <DHT22_ReadTemperature+0x324>
    uart_buf_len = sprintf(uart_buf, "Error: Checksum mismatch. Data invalid.\r\n");
 800119e:	4938      	ldr	r1, [pc, #224]	@ (8001280 <DHT22_ReadTemperature+0x3e0>)
 80011a0:	4833      	ldr	r0, [pc, #204]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 80011a2:	f001 ff87 	bl	80030b4 <siprintf>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 80011ac:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80011ae:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	492d      	ldr	r1, [pc, #180]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 80011ba:	482f      	ldr	r0, [pc, #188]	@ (8001278 <DHT22_ReadTemperature+0x3d8>)
 80011bc:	f001 fbbe 	bl	800293c <HAL_UART_Transmit>
    return 1; // Checksum error
 80011c0:	2301      	movs	r3, #1
 80011c2:	e04f      	b.n	8001264 <DHT22_ReadTemperature+0x3c4>
  }

  uart_buf_len = sprintf(uart_buf, "Checksum valid. Converting data to temperature...\r\n");
 80011c4:	492f      	ldr	r1, [pc, #188]	@ (8001284 <DHT22_ReadTemperature+0x3e4>)
 80011c6:	482a      	ldr	r0, [pc, #168]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 80011c8:	f001 ff74 	bl	80030b4 <siprintf>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 80011d2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80011d4:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	4924      	ldr	r1, [pc, #144]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 80011e0:	4825      	ldr	r0, [pc, #148]	@ (8001278 <DHT22_ReadTemperature+0x3d8>)
 80011e2:	f001 fbab 	bl	800293c <HAL_UART_Transmit>

  // Step 6: Convert Data to Temperature
  *temperature = ((data[2] << 8) | (data[3] & 0x7F)) / 10.0;
 80011e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80011ea:	021a      	lsls	r2, r3, #8
 80011ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80011f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011f4:	4313      	orrs	r3, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ac 	bl	8000554 <__aeabi_i2d>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <DHT22_ReadTemperature+0x3e8>)
 8001202:	f7ff fb3b 	bl	800087c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fc1d 	bl	8000a4c <__aeabi_d2f>
 8001212:	4602      	mov	r2, r0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
  if (data[3] & 0x80) {
 8001218:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121c:	b25b      	sxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	da07      	bge.n	8001232 <DHT22_ReadTemperature+0x392>
    *temperature *= -1; // Negative temperature
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eef1 7a67 	vneg.f32	s15, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edc3 7a00 	vstr	s15, [r3]
  }

  uart_buf_len = sprintf(uart_buf, "Temperature conversion complete: %.2f°C\r\n", *temperature);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f99e 	bl	8000578 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4912      	ldr	r1, [pc, #72]	@ (800128c <DHT22_ReadTemperature+0x3ec>)
 8001242:	480b      	ldr	r0, [pc, #44]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 8001244:	f001 ff36 	bl	80030b4 <siprintf>
 8001248:	4603      	mov	r3, r0
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 800124e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <DHT22_ReadTemperature+0x3d4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	4905      	ldr	r1, [pc, #20]	@ (8001270 <DHT22_ReadTemperature+0x3d0>)
 800125c:	4806      	ldr	r0, [pc, #24]	@ (8001278 <DHT22_ReadTemperature+0x3d8>)
 800125e:	f001 fb6d 	bl	800293c <HAL_UART_Transmit>

  return 0; // Success
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3738      	adds	r7, #56	@ 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08003bb0 	.word	0x08003bb0
 8001270:	200000c0 	.word	0x200000c0
 8001274:	20000124 	.word	0x20000124
 8001278:	20000078 	.word	0x20000078
 800127c:	08003bd0 	.word	0x08003bd0
 8001280:	08003be8 	.word	0x08003be8
 8001284:	08003c14 	.word	0x08003c14
 8001288:	40240000 	.word	0x40240000
 800128c:	08003c48 	.word	0x08003c48

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	@ 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2234      	movs	r2, #52	@ 0x34
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 ff28 	bl	80030f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b28      	ldr	r3, [pc, #160]	@ (800135c <SystemClock_Config+0xcc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	4a27      	ldr	r2, [pc, #156]	@ (800135c <SystemClock_Config+0xcc>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c4:	4b25      	ldr	r3, [pc, #148]	@ (800135c <SystemClock_Config+0xcc>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <SystemClock_Config+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012dc:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <SystemClock_Config+0xd0>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <SystemClock_Config+0xd0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	2310      	movs	r3, #16
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001304:	2308      	movs	r3, #8
 8001306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001308:	2348      	movs	r3, #72	@ 0x48
 800130a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130c:	2302      	movs	r3, #2
 800130e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4618      	mov	r0, r3
 800131a:	f001 f821 	bl	8002360 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x98>
    Error_Handler();
 8001324:	f000 f87a 	bl	800141c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60bb      	str	r3, [r7, #8]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fcc1 	bl	8001ccc <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xc4>
    Error_Handler();
 8001350:	f000 f864 	bl	800141c <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	@ 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_GPIO_Init+0x5c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <MX_GPIO_Init+0x5c>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <MX_GPIO_Init+0x5c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2140      	movs	r1, #64	@ 0x40
 8001398:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <MX_GPIO_Init+0x60>)
 800139a:	f000 fc7d 	bl	8001c98 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139e:	2340      	movs	r3, #64	@ 0x40
 80013a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <MX_GPIO_Init+0x60>)
 80013b4:	f000 fac4 	bl	8001940 <HAL_GPIO_Init>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f001 fa4c 	bl	800289c <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f000 f807 	bl	800141c <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000078 	.word	0x20000078
 8001418:	40004400 	.word	0x40004400

0800141c <Error_Handler>:
/**
  * @brief  Error Handler
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <Error_Handler+0x4>

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001462:	2007      	movs	r0, #7
 8001464:	f000 fa38 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <HAL_UART_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12b      	bne.n	80014ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_UART_MspInit+0x88>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <HAL_UART_MspInit+0x88>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_UART_MspInit+0x88>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_UART_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	@ (80014fc <HAL_UART_MspInit+0x88>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_UART_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ce:	230c      	movs	r3, #12
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014de:	2307      	movs	r3, #7
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <HAL_UART_MspInit+0x8c>)
 80014ea:	f000 fa29 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	@ 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 f8c7 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f001 fdb6 	bl	8003104 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20020000 	.word	0x20020000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	2000012c 	.word	0x2000012c
 80015cc:	20000280 	.word	0x20000280

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800162c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015f8:	f7ff ffea 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	@ (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	@ (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001622:	f001 fd75 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fbd9 	bl	8000ddc <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001638:	08003cd0 	.word	0x08003cd0
  ldr r2, =_sbss
 800163c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001640:	2000027c 	.word	0x2000027c

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f931 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fed2 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f93b 	bl	8001926 <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f911 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008
 8001710:	20000130 	.word	0x20000130

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000130 	.word	0x20000130

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffee 	bl	8001714 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffde 	bl	8001714 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	@ (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	@ (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	@ 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff8e 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff47 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff5c 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff8e 	bl	800182c <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5d 	bl	80017d8 <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffb0 	bl	8001894 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e165      	b.n	8001c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8154 	bne.w	8001c22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d005      	beq.n	8001992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	2b02      	cmp	r3, #2
 8001990:	d130      	bne.n	80019f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d017      	beq.n	8001a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d123      	bne.n	8001a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80ae 	beq.w	8001c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	4a5c      	ldr	r2, [pc, #368]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae2:	4a58      	ldr	r2, [pc, #352]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	@ (8001c48 <HAL_GPIO_Init+0x308>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d025      	beq.n	8001b5a <HAL_GPIO_Init+0x21a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4e      	ldr	r2, [pc, #312]	@ (8001c4c <HAL_GPIO_Init+0x30c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01f      	beq.n	8001b56 <HAL_GPIO_Init+0x216>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4d      	ldr	r2, [pc, #308]	@ (8001c50 <HAL_GPIO_Init+0x310>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	@ (8001c54 <HAL_GPIO_Init+0x314>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4b      	ldr	r2, [pc, #300]	@ (8001c58 <HAL_GPIO_Init+0x318>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x20a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4a      	ldr	r2, [pc, #296]	@ (8001c5c <HAL_GPIO_Init+0x31c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a49      	ldr	r2, [pc, #292]	@ (8001c60 <HAL_GPIO_Init+0x320>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x202>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9e:	4a31      	ldr	r2, [pc, #196]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc8:	4a26      	ldr	r2, [pc, #152]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1c:	4a11      	ldr	r2, [pc, #68]	@ (8001c64 <HAL_GPIO_Init+0x324>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae96 	bls.w	800195c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0cc      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b68      	ldr	r3, [pc, #416]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d90c      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b65      	ldr	r3, [pc, #404]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a58      	ldr	r2, [pc, #352]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d044      	beq.n	8001dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e067      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4934      	ldr	r1, [pc, #208]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff fcaa 	bl	8001714 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7ff fca6 	bl	8001714 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e04f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d20c      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 f855 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	490a      	ldr	r1, [pc, #40]	@ (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fc0a 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	08003c74 	.word	0x08003c74
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000000 	.word	0x20000000

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0a9b      	lsrs	r3, r3, #10
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	@ (8001ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08003c84 	.word	0x08003c84

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001edc:	f7ff ffdc 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0b5b      	lsrs	r3, r3, #13
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	@ (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08003c84 	.word	0x08003c84

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f04:	b0ae      	sub	sp, #184	@ 0xb8
 8001f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f26:	4bcb      	ldr	r3, [pc, #812]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	f200 8206 	bhi.w	8002340 <HAL_RCC_GetSysClockFreq+0x440>
 8001f34:	a201      	add	r2, pc, #4	@ (adr r2, 8001f3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f71 	.word	0x08001f71
 8001f40:	08002341 	.word	0x08002341
 8001f44:	08002341 	.word	0x08002341
 8001f48:	08002341 	.word	0x08002341
 8001f4c:	08001f79 	.word	0x08001f79
 8001f50:	08002341 	.word	0x08002341
 8001f54:	08002341 	.word	0x08002341
 8001f58:	08002341 	.word	0x08002341
 8001f5c:	08001f81 	.word	0x08001f81
 8001f60:	08002341 	.word	0x08002341
 8001f64:	08002341 	.word	0x08002341
 8001f68:	08002341 	.word	0x08002341
 8001f6c:	08002171 	.word	0x08002171
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4bb9      	ldr	r3, [pc, #740]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f76:	e1e7      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4bb8      	ldr	r3, [pc, #736]	@ (800225c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f7e:	e1e3      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f80:	4bb4      	ldr	r3, [pc, #720]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8c:	4bb1      	ldr	r3, [pc, #708]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d071      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f98:	4bae      	ldr	r3, [pc, #696]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fa4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f04f 0100 	mov.w	r1, #0
 8001fca:	0159      	lsls	r1, r3, #5
 8001fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd0:	0150      	lsls	r0, r2, #5
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	1a51      	subs	r1, r2, r1
 8001fda:	6439      	str	r1, [r7, #64]	@ 0x40
 8001fdc:	4629      	mov	r1, r5
 8001fde:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	018b      	lsls	r3, r1, #6
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	018a      	lsls	r2, r1, #6
 8001ffe:	4641      	mov	r1, r8
 8002000:	1a51      	subs	r1, r2, r1
 8002002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002004:	4649      	mov	r1, r9
 8002006:	eb63 0301 	sbc.w	r3, r3, r1
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002018:	4649      	mov	r1, r9
 800201a:	00cb      	lsls	r3, r1, #3
 800201c:	4641      	mov	r1, r8
 800201e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002022:	4641      	mov	r1, r8
 8002024:	00ca      	lsls	r2, r1, #3
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	4603      	mov	r3, r0
 800202c:	4622      	mov	r2, r4
 800202e:	189b      	adds	r3, r3, r2
 8002030:	633b      	str	r3, [r7, #48]	@ 0x30
 8002032:	462b      	mov	r3, r5
 8002034:	460a      	mov	r2, r1
 8002036:	eb42 0303 	adc.w	r3, r2, r3
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002048:	4629      	mov	r1, r5
 800204a:	024b      	lsls	r3, r1, #9
 800204c:	4621      	mov	r1, r4
 800204e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002052:	4621      	mov	r1, r4
 8002054:	024a      	lsls	r2, r1, #9
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800205e:	2200      	movs	r2, #0
 8002060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002064:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002068:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800206c:	f7fe fd3e 	bl	8000aec <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800207a:	e067      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207c:	4b75      	ldr	r3, [pc, #468]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	2200      	movs	r2, #0
 8002084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002088:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800208c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002094:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002096:	2300      	movs	r3, #0
 8002098:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800209a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800209e:	4622      	mov	r2, r4
 80020a0:	462b      	mov	r3, r5
 80020a2:	f04f 0000 	mov.w	r0, #0
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	0159      	lsls	r1, r3, #5
 80020ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b0:	0150      	lsls	r0, r2, #5
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4621      	mov	r1, r4
 80020b8:	1a51      	subs	r1, r2, r1
 80020ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020bc:	4629      	mov	r1, r5
 80020be:	eb63 0301 	sbc.w	r3, r3, r1
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80020d0:	4649      	mov	r1, r9
 80020d2:	018b      	lsls	r3, r1, #6
 80020d4:	4641      	mov	r1, r8
 80020d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020da:	4641      	mov	r1, r8
 80020dc:	018a      	lsls	r2, r1, #6
 80020de:	4641      	mov	r1, r8
 80020e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80020e4:	4649      	mov	r1, r9
 80020e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020fe:	4692      	mov	sl, r2
 8002100:	469b      	mov	fp, r3
 8002102:	4623      	mov	r3, r4
 8002104:	eb1a 0303 	adds.w	r3, sl, r3
 8002108:	623b      	str	r3, [r7, #32]
 800210a:	462b      	mov	r3, r5
 800210c:	eb4b 0303 	adc.w	r3, fp, r3
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800211e:	4629      	mov	r1, r5
 8002120:	028b      	lsls	r3, r1, #10
 8002122:	4621      	mov	r1, r4
 8002124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002128:	4621      	mov	r1, r4
 800212a:	028a      	lsls	r2, r1, #10
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002134:	2200      	movs	r2, #0
 8002136:	673b      	str	r3, [r7, #112]	@ 0x70
 8002138:	677a      	str	r2, [r7, #116]	@ 0x74
 800213a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800213e:	f7fe fcd5 	bl	8000aec <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4613      	mov	r3, r2
 8002148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800214c:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	3301      	adds	r3, #1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800215e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800216e:	e0eb      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4b38      	ldr	r3, [pc, #224]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217c:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d06b      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002188:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	2200      	movs	r2, #0
 8002190:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219a:	663b      	str	r3, [r7, #96]	@ 0x60
 800219c:	2300      	movs	r3, #0
 800219e:	667b      	str	r3, [r7, #100]	@ 0x64
 80021a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021a4:	4622      	mov	r2, r4
 80021a6:	462b      	mov	r3, r5
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	0159      	lsls	r1, r3, #5
 80021b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b6:	0150      	lsls	r0, r2, #5
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4621      	mov	r1, r4
 80021be:	1a51      	subs	r1, r2, r1
 80021c0:	61b9      	str	r1, [r7, #24]
 80021c2:	4629      	mov	r1, r5
 80021c4:	eb63 0301 	sbc.w	r3, r3, r1
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021d6:	4659      	mov	r1, fp
 80021d8:	018b      	lsls	r3, r1, #6
 80021da:	4651      	mov	r1, sl
 80021dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021e0:	4651      	mov	r1, sl
 80021e2:	018a      	lsls	r2, r1, #6
 80021e4:	4651      	mov	r1, sl
 80021e6:	ebb2 0801 	subs.w	r8, r2, r1
 80021ea:	4659      	mov	r1, fp
 80021ec:	eb63 0901 	sbc.w	r9, r3, r1
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002200:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002204:	4690      	mov	r8, r2
 8002206:	4699      	mov	r9, r3
 8002208:	4623      	mov	r3, r4
 800220a:	eb18 0303 	adds.w	r3, r8, r3
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	462b      	mov	r3, r5
 8002212:	eb49 0303 	adc.w	r3, r9, r3
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002224:	4629      	mov	r1, r5
 8002226:	024b      	lsls	r3, r1, #9
 8002228:	4621      	mov	r1, r4
 800222a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800222e:	4621      	mov	r1, r4
 8002230:	024a      	lsls	r2, r1, #9
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800223a:	2200      	movs	r2, #0
 800223c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800223e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002240:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002244:	f7fe fc52 	bl	8000aec <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4613      	mov	r3, r2
 800224e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002252:	e065      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x420>
 8002254:	40023800 	.word	0x40023800
 8002258:	00f42400 	.word	0x00f42400
 800225c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002260:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x458>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	2200      	movs	r2, #0
 8002268:	4618      	mov	r0, r3
 800226a:	4611      	mov	r1, r2
 800226c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002270:	653b      	str	r3, [r7, #80]	@ 0x50
 8002272:	2300      	movs	r3, #0
 8002274:	657b      	str	r3, [r7, #84]	@ 0x54
 8002276:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800227a:	4642      	mov	r2, r8
 800227c:	464b      	mov	r3, r9
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228c:	0150      	lsls	r0, r2, #5
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4641      	mov	r1, r8
 8002294:	1a51      	subs	r1, r2, r1
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	4649      	mov	r1, r9
 800229a:	eb63 0301 	sbc.w	r3, r3, r1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022ac:	4659      	mov	r1, fp
 80022ae:	018b      	lsls	r3, r1, #6
 80022b0:	4651      	mov	r1, sl
 80022b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022b6:	4651      	mov	r1, sl
 80022b8:	018a      	lsls	r2, r1, #6
 80022ba:	4651      	mov	r1, sl
 80022bc:	1a54      	subs	r4, r2, r1
 80022be:	4659      	mov	r1, fp
 80022c0:	eb63 0501 	sbc.w	r5, r3, r1
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	00eb      	lsls	r3, r5, #3
 80022ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d2:	00e2      	lsls	r2, r4, #3
 80022d4:	4614      	mov	r4, r2
 80022d6:	461d      	mov	r5, r3
 80022d8:	4643      	mov	r3, r8
 80022da:	18e3      	adds	r3, r4, r3
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	464b      	mov	r3, r9
 80022e0:	eb45 0303 	adc.w	r3, r5, r3
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022f2:	4629      	mov	r1, r5
 80022f4:	028b      	lsls	r3, r1, #10
 80022f6:	4621      	mov	r1, r4
 80022f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022fc:	4621      	mov	r1, r4
 80022fe:	028a      	lsls	r2, r1, #10
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002308:	2200      	movs	r2, #0
 800230a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800230c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800230e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002312:	f7fe fbeb 	bl	8000aec <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4613      	mov	r3, r2
 800231c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x458>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0f1b      	lsrs	r3, r3, #28
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800232e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800233e:	e003      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002346:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800234c:	4618      	mov	r0, r3
 800234e:	37b8      	adds	r7, #184	@ 0xb8
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400

08002360 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e28d      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8083 	beq.w	8002486 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002380:	4b94      	ldr	r3, [pc, #592]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b04      	cmp	r3, #4
 800238a:	d019      	beq.n	80023c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800238c:	4b91      	ldr	r3, [pc, #580]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
        || \
 8002394:	2b08      	cmp	r3, #8
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002398:	4b8e      	ldr	r3, [pc, #568]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a4:	d00c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a6:	4b8b      	ldr	r3, [pc, #556]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b2:	4b88      	ldr	r3, [pc, #544]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023be:	d10b      	bne.n	80023d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	4b84      	ldr	r3, [pc, #528]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05b      	beq.n	8002484 <HAL_RCC_OscConfig+0x124>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d157      	bne.n	8002484 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e25a      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x90>
 80023e2:	4b7c      	ldr	r3, [pc, #496]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7b      	ldr	r2, [pc, #492]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e01d      	b.n	800242c <HAL_RCC_OscConfig+0xcc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0xb4>
 80023fa:	4b76      	ldr	r3, [pc, #472]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a75      	ldr	r2, [pc, #468]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b73      	ldr	r3, [pc, #460]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a72      	ldr	r2, [pc, #456]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0xcc>
 8002414:	4b6f      	ldr	r3, [pc, #444]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6e      	ldr	r2, [pc, #440]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b6c      	ldr	r3, [pc, #432]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6b      	ldr	r2, [pc, #428]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff f96e 	bl	8001714 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff f96a 	bl	8001714 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	@ 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e21f      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b61      	ldr	r3, [pc, #388]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0xdc>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f95a 	bl	8001714 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff f956 	bl	8001714 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	@ 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e20b      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	4b57      	ldr	r3, [pc, #348]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x104>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06f      	beq.n	8002572 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002492:	4b50      	ldr	r3, [pc, #320]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b00      	cmp	r3, #0
 800249c:	d017      	beq.n	80024ce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800249e:	4b4d      	ldr	r3, [pc, #308]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
        || \
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024aa:	4b4a      	ldr	r3, [pc, #296]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b6:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d11c      	bne.n	80024fc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d116      	bne.n	80024fc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x186>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e1d3      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	e03a      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002504:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff f903 	bl	8001714 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002512:	f7ff f8ff 	bl	8001714 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e1b4      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b28      	ldr	r3, [pc, #160]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4925      	ldr	r1, [pc, #148]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]
 8002544:	e015      	b.n	8002572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff f8e2 	bl	8001714 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002554:	f7ff f8de 	bl	8001714 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e193      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d036      	beq.n	80025ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_RCC_OscConfig+0x27c>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7ff f8c2 	bl	8001714 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff f8be 	bl	8001714 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e173      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_OscConfig+0x274>)
 80025a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x234>
 80025b2:	e01b      	b.n	80025ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b4:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_RCC_OscConfig+0x27c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7ff f8ab 	bl	8001714 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	e00e      	b.n	80025e0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c2:	f7ff f8a7 	bl	8001714 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d907      	bls.n	80025e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e15c      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
 80025d4:	40023800 	.word	0x40023800
 80025d8:	42470000 	.word	0x42470000
 80025dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b8a      	ldr	r3, [pc, #552]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ea      	bne.n	80025c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8097 	beq.w	8002728 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b83      	ldr	r3, [pc, #524]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b7f      	ldr	r3, [pc, #508]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a7e      	ldr	r2, [pc, #504]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b7c      	ldr	r3, [pc, #496]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b79      	ldr	r3, [pc, #484]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d118      	bne.n	8002668 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b76      	ldr	r3, [pc, #472]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a75      	ldr	r2, [pc, #468]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7ff f867 	bl	8001714 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7ff f863 	bl	8001714 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e118      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b6c      	ldr	r3, [pc, #432]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x31e>
 8002670:	4b66      	ldr	r3, [pc, #408]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4a65      	ldr	r2, [pc, #404]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	@ 0x70
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0x358>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x340>
 8002686:	4b61      	ldr	r3, [pc, #388]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	4a60      	ldr	r2, [pc, #384]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	@ 0x70
 8002692:	4b5e      	ldr	r3, [pc, #376]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	4a5d      	ldr	r2, [pc, #372]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	@ 0x70
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0x358>
 80026a0:	4b5a      	ldr	r3, [pc, #360]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	4a59      	ldr	r2, [pc, #356]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ac:	4b57      	ldr	r3, [pc, #348]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b0:	4a56      	ldr	r2, [pc, #344]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	f023 0304 	bic.w	r3, r3, #4
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff f828 	bl	8001714 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7ff f824 	bl	8001714 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0d7      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	4b4b      	ldr	r3, [pc, #300]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ee      	beq.n	80026c8 <HAL_RCC_OscConfig+0x368>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7ff f812 	bl	8001714 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7ff f80e 	bl	8001714 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0c1      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270a:	4b40      	ldr	r3, [pc, #256]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ee      	bne.n	80026f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	4a3a      	ldr	r2, [pc, #232]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80ad 	beq.w	800288c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002732:	4b36      	ldr	r3, [pc, #216]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b08      	cmp	r3, #8
 800273c:	d060      	beq.n	8002800 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d145      	bne.n	80027d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_RCC_OscConfig+0x4b4>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe ffe2 	bl	8001714 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe ffde 	bl	8001714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e093      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b29      	ldr	r3, [pc, #164]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	3b01      	subs	r3, #1
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	071b      	lsls	r3, r3, #28
 800279e:	491b      	ldr	r1, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x4b4>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe ffb3 	bl	8001714 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe ffaf 	bl	8001714 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e064      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x452>
 80027d0:	e05c      	b.n	800288c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_OscConfig+0x4b4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff9c 	bl	8001714 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff98 	bl	8001714 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e04d      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x480>
 80027fe:	e045      	b.n	800288c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e040      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002818:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <HAL_RCC_OscConfig+0x538>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d030      	beq.n	8002888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d129      	bne.n	8002888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d122      	bne.n	8002888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d119      	bne.n	8002888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d10f      	bne.n	8002888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e042      	b.n	8002934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fdd6 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f973 	bl	8002bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d175      	bne.n	8002a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Transmit+0x2c>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e06e      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2221      	movs	r2, #33	@ 0x21
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297a:	f7fe fecb 	bl	8001714 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029b0:	e02e      	b.n	8002a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	@ 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f848 	bl	8002a52 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03a      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3302      	adds	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e007      	b.n	8002a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1cb      	bne.n	80029b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f814 	bl	8002a52 <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e006      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a62:	e03b      	b.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d037      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fe52 	bl	8001714 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03a      	b.n	8002afc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d023      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b80      	cmp	r3, #128	@ 0x80
 8002a98:	d020      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b40      	cmp	r3, #64	@ 0x40
 8002a9e:	d01d      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d116      	bne.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f81d 	bl	8002b04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2208      	movs	r2, #8
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e00f      	b.n	8002afc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d0b4      	beq.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b095      	sub	sp, #84	@ 0x54
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d119      	bne.n	8002bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0310 	bic.w	r3, r3, #16
 8002b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b9c:	61ba      	str	r2, [r7, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bbe:	bf00      	nop
 8002bc0:	3754      	adds	r7, #84	@ 0x54
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b0c0      	sub	sp, #256	@ 0x100
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	ea40 0301 	orr.w	r3, r0, r1
 8002bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c24:	f021 010c 	bic.w	r1, r1, #12
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c32:	430b      	orrs	r3, r1
 8002c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	6999      	ldr	r1, [r3, #24]
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	ea40 0301 	orr.w	r3, r0, r1
 8002c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002e98 <UART_SetConfig+0x2cc>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d005      	beq.n	8002c6c <UART_SetConfig+0xa0>
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8d      	ldr	r3, [pc, #564]	@ (8002e9c <UART_SetConfig+0x2d0>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d104      	bne.n	8002c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c6c:	f7ff f934 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 8002c70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c74:	e003      	b.n	8002c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c76:	f7ff f91b 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8002c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c88:	f040 810c 	bne.w	8002ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c90:	2200      	movs	r2, #0
 8002c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cae:	4621      	mov	r1, r4
 8002cb0:	eb12 0801 	adds.w	r8, r2, r1
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb43 0901 	adc.w	r9, r3, r1
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cce:	4690      	mov	r8, r2
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	eb18 0303 	adds.w	r3, r8, r3
 8002cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cdc:	462b      	mov	r3, r5
 8002cde:	eb49 0303 	adc.w	r3, r9, r3
 8002ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	18db      	adds	r3, r3, r3
 8002cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d00:	4613      	mov	r3, r2
 8002d02:	eb42 0303 	adc.w	r3, r2, r3
 8002d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d10:	f7fd feec 	bl	8000aec <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b61      	ldr	r3, [pc, #388]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011c      	lsls	r4, r3, #4
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d44:	4641      	mov	r1, r8
 8002d46:	eb12 0a01 	adds.w	sl, r2, r1
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d64:	4692      	mov	sl, r2
 8002d66:	469b      	mov	fp, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d72:	464b      	mov	r3, r9
 8002d74:	eb4b 0303 	adc.w	r3, fp, r3
 8002d78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002da6:	f7fd fea1 	bl	8000aec <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002db2:	fba3 2301 	umull	r2, r3, r3, r1
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2264      	movs	r2, #100	@ 0x64
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	1acb      	subs	r3, r1, r3
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dc6:	4b36      	ldr	r3, [pc, #216]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dd4:	441c      	add	r4, r3
 8002dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002de0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002df0:	415b      	adcs	r3, r3
 8002df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	460a      	mov	r2, r1
 8002e30:	eb42 0303 	adc.w	r3, r2, r3
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	18db      	adds	r3, r3, r3
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	4613      	mov	r3, r2
 8002e54:	eb42 0303 	adc.w	r3, r2, r3
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e62:	f7fd fe43 	bl	8000aec <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2164      	movs	r1, #100	@ 0x64
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3332      	adds	r3, #50	@ 0x32
 8002e7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	f003 0207 	and.w	r2, r3, #7
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4422      	add	r2, r4
 8002e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e94:	e106      	b.n	80030a4 <UART_SetConfig+0x4d8>
 8002e96:	bf00      	nop
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eb6:	4642      	mov	r2, r8
 8002eb8:	464b      	mov	r3, r9
 8002eba:	1891      	adds	r1, r2, r2
 8002ebc:	6239      	str	r1, [r7, #32]
 8002ebe:	415b      	adcs	r3, r3
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	1854      	adds	r4, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb43 0501 	adc.w	r5, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	00eb      	lsls	r3, r5, #3
 8002eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ede:	00e2      	lsls	r2, r4, #3
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	4643      	mov	r3, r8
 8002ee6:	18e3      	adds	r3, r4, r3
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eec:	464b      	mov	r3, r9
 8002eee:	eb45 0303 	adc.w	r3, r5, r3
 8002ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f12:	4629      	mov	r1, r5
 8002f14:	008b      	lsls	r3, r1, #2
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	008a      	lsls	r2, r1, #2
 8002f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f24:	f7fd fde2 	bl	8000aec <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8002f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	011c      	lsls	r4, r3, #4
 8002f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	1891      	adds	r1, r2, r2
 8002f4e:	61b9      	str	r1, [r7, #24]
 8002f50:	415b      	adcs	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f58:	4641      	mov	r1, r8
 8002f5a:	1851      	adds	r1, r2, r1
 8002f5c:	6139      	str	r1, [r7, #16]
 8002f5e:	4649      	mov	r1, r9
 8002f60:	414b      	adcs	r3, r1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f70:	4659      	mov	r1, fp
 8002f72:	00cb      	lsls	r3, r1, #3
 8002f74:	4651      	mov	r1, sl
 8002f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	00ca      	lsls	r2, r1, #3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	4642      	mov	r2, r8
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	460a      	mov	r2, r1
 8002f90:	eb42 0303 	adc.w	r3, r2, r3
 8002f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	008b      	lsls	r3, r1, #2
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fba:	4641      	mov	r1, r8
 8002fbc:	008a      	lsls	r2, r1, #2
 8002fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fc2:	f7fd fd93 	bl	8000aec <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8002fce:	fba3 2301 	umull	r2, r3, r3, r1
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	@ 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1acb      	subs	r3, r1, r3
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	3332      	adds	r3, #50	@ 0x32
 8002fe0:	4a33      	ldr	r2, [pc, #204]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fec:	441c      	add	r4, r3
 8002fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ff6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ff8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	1891      	adds	r1, r2, r2
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	415b      	adcs	r3, r3
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800300c:	4641      	mov	r1, r8
 800300e:	1851      	adds	r1, r2, r1
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	4649      	mov	r1, r9
 8003014:	414b      	adcs	r3, r1
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003024:	4659      	mov	r1, fp
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302e:	4651      	mov	r1, sl
 8003030:	00ca      	lsls	r2, r1, #3
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	4603      	mov	r3, r0
 8003038:	4642      	mov	r2, r8
 800303a:	189b      	adds	r3, r3, r2
 800303c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303e:	464b      	mov	r3, r9
 8003040:	460a      	mov	r2, r1
 8003042:	eb42 0303 	adc.w	r3, r2, r3
 8003046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
 8003052:	667a      	str	r2, [r7, #100]	@ 0x64
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003060:	4649      	mov	r1, r9
 8003062:	008b      	lsls	r3, r1, #2
 8003064:	4641      	mov	r1, r8
 8003066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800306a:	4641      	mov	r1, r8
 800306c:	008a      	lsls	r2, r1, #2
 800306e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003072:	f7fd fd3b 	bl	8000aec <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <UART_SetConfig+0x4e4>)
 800307c:	fba3 1302 	umull	r1, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2164      	movs	r1, #100	@ 0x64
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	3332      	adds	r3, #50	@ 0x32
 800308e:	4a08      	ldr	r2, [pc, #32]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4422      	add	r2, r4
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	bf00      	nop
 80030a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030aa:	46bd      	mov	sp, r7
 80030ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b0:	51eb851f 	.word	0x51eb851f

080030b4 <siprintf>:
 80030b4:	b40e      	push	{r1, r2, r3}
 80030b6:	b500      	push	{lr}
 80030b8:	b09c      	sub	sp, #112	@ 0x70
 80030ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80030bc:	9002      	str	r0, [sp, #8]
 80030be:	9006      	str	r0, [sp, #24]
 80030c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80030c4:	4809      	ldr	r0, [pc, #36]	@ (80030ec <siprintf+0x38>)
 80030c6:	9107      	str	r1, [sp, #28]
 80030c8:	9104      	str	r1, [sp, #16]
 80030ca:	4909      	ldr	r1, [pc, #36]	@ (80030f0 <siprintf+0x3c>)
 80030cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80030d0:	9105      	str	r1, [sp, #20]
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	a902      	add	r1, sp, #8
 80030d8:	f000 f994 	bl	8003404 <_svfiprintf_r>
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	b01c      	add	sp, #112	@ 0x70
 80030e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030e8:	b003      	add	sp, #12
 80030ea:	4770      	bx	lr
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	ffff0208 	.word	0xffff0208

080030f4 <memset>:
 80030f4:	4402      	add	r2, r0
 80030f6:	4603      	mov	r3, r0
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d100      	bne.n	80030fe <memset+0xa>
 80030fc:	4770      	bx	lr
 80030fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003102:	e7f9      	b.n	80030f8 <memset+0x4>

08003104 <__errno>:
 8003104:	4b01      	ldr	r3, [pc, #4]	@ (800310c <__errno+0x8>)
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	2000000c 	.word	0x2000000c

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	4d0d      	ldr	r5, [pc, #52]	@ (8003148 <__libc_init_array+0x38>)
 8003114:	4c0d      	ldr	r4, [pc, #52]	@ (800314c <__libc_init_array+0x3c>)
 8003116:	1b64      	subs	r4, r4, r5
 8003118:	10a4      	asrs	r4, r4, #2
 800311a:	2600      	movs	r6, #0
 800311c:	42a6      	cmp	r6, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	4d0b      	ldr	r5, [pc, #44]	@ (8003150 <__libc_init_array+0x40>)
 8003122:	4c0c      	ldr	r4, [pc, #48]	@ (8003154 <__libc_init_array+0x44>)
 8003124:	f000 fc66 	bl	80039f4 <_init>
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	2600      	movs	r6, #0
 800312e:	42a6      	cmp	r6, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	f855 3b04 	ldr.w	r3, [r5], #4
 8003138:	4798      	blx	r3
 800313a:	3601      	adds	r6, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003142:	4798      	blx	r3
 8003144:	3601      	adds	r6, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	08003cc8 	.word	0x08003cc8
 800314c:	08003cc8 	.word	0x08003cc8
 8003150:	08003cc8 	.word	0x08003cc8
 8003154:	08003ccc 	.word	0x08003ccc

08003158 <__retarget_lock_acquire_recursive>:
 8003158:	4770      	bx	lr

0800315a <__retarget_lock_release_recursive>:
 800315a:	4770      	bx	lr

0800315c <_free_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	2900      	cmp	r1, #0
 8003162:	d041      	beq.n	80031e8 <_free_r+0x8c>
 8003164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003168:	1f0c      	subs	r4, r1, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	bfb8      	it	lt
 800316e:	18e4      	addlt	r4, r4, r3
 8003170:	f000 f8e0 	bl	8003334 <__malloc_lock>
 8003174:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <_free_r+0x90>)
 8003176:	6813      	ldr	r3, [r2, #0]
 8003178:	b933      	cbnz	r3, 8003188 <_free_r+0x2c>
 800317a:	6063      	str	r3, [r4, #4]
 800317c:	6014      	str	r4, [r2, #0]
 800317e:	4628      	mov	r0, r5
 8003180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003184:	f000 b8dc 	b.w	8003340 <__malloc_unlock>
 8003188:	42a3      	cmp	r3, r4
 800318a:	d908      	bls.n	800319e <_free_r+0x42>
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	1821      	adds	r1, r4, r0
 8003190:	428b      	cmp	r3, r1
 8003192:	bf01      	itttt	eq
 8003194:	6819      	ldreq	r1, [r3, #0]
 8003196:	685b      	ldreq	r3, [r3, #4]
 8003198:	1809      	addeq	r1, r1, r0
 800319a:	6021      	streq	r1, [r4, #0]
 800319c:	e7ed      	b.n	800317a <_free_r+0x1e>
 800319e:	461a      	mov	r2, r3
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	b10b      	cbz	r3, 80031a8 <_free_r+0x4c>
 80031a4:	42a3      	cmp	r3, r4
 80031a6:	d9fa      	bls.n	800319e <_free_r+0x42>
 80031a8:	6811      	ldr	r1, [r2, #0]
 80031aa:	1850      	adds	r0, r2, r1
 80031ac:	42a0      	cmp	r0, r4
 80031ae:	d10b      	bne.n	80031c8 <_free_r+0x6c>
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	4401      	add	r1, r0
 80031b4:	1850      	adds	r0, r2, r1
 80031b6:	4283      	cmp	r3, r0
 80031b8:	6011      	str	r1, [r2, #0]
 80031ba:	d1e0      	bne.n	800317e <_free_r+0x22>
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	6053      	str	r3, [r2, #4]
 80031c2:	4408      	add	r0, r1
 80031c4:	6010      	str	r0, [r2, #0]
 80031c6:	e7da      	b.n	800317e <_free_r+0x22>
 80031c8:	d902      	bls.n	80031d0 <_free_r+0x74>
 80031ca:	230c      	movs	r3, #12
 80031cc:	602b      	str	r3, [r5, #0]
 80031ce:	e7d6      	b.n	800317e <_free_r+0x22>
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	1821      	adds	r1, r4, r0
 80031d4:	428b      	cmp	r3, r1
 80031d6:	bf04      	itt	eq
 80031d8:	6819      	ldreq	r1, [r3, #0]
 80031da:	685b      	ldreq	r3, [r3, #4]
 80031dc:	6063      	str	r3, [r4, #4]
 80031de:	bf04      	itt	eq
 80031e0:	1809      	addeq	r1, r1, r0
 80031e2:	6021      	streq	r1, [r4, #0]
 80031e4:	6054      	str	r4, [r2, #4]
 80031e6:	e7ca      	b.n	800317e <_free_r+0x22>
 80031e8:	bd38      	pop	{r3, r4, r5, pc}
 80031ea:	bf00      	nop
 80031ec:	20000278 	.word	0x20000278

080031f0 <sbrk_aligned>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003230 <sbrk_aligned+0x40>)
 80031f4:	460c      	mov	r4, r1
 80031f6:	6831      	ldr	r1, [r6, #0]
 80031f8:	4605      	mov	r5, r0
 80031fa:	b911      	cbnz	r1, 8003202 <sbrk_aligned+0x12>
 80031fc:	f000 fba6 	bl	800394c <_sbrk_r>
 8003200:	6030      	str	r0, [r6, #0]
 8003202:	4621      	mov	r1, r4
 8003204:	4628      	mov	r0, r5
 8003206:	f000 fba1 	bl	800394c <_sbrk_r>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d103      	bne.n	8003216 <sbrk_aligned+0x26>
 800320e:	f04f 34ff 	mov.w	r4, #4294967295
 8003212:	4620      	mov	r0, r4
 8003214:	bd70      	pop	{r4, r5, r6, pc}
 8003216:	1cc4      	adds	r4, r0, #3
 8003218:	f024 0403 	bic.w	r4, r4, #3
 800321c:	42a0      	cmp	r0, r4
 800321e:	d0f8      	beq.n	8003212 <sbrk_aligned+0x22>
 8003220:	1a21      	subs	r1, r4, r0
 8003222:	4628      	mov	r0, r5
 8003224:	f000 fb92 	bl	800394c <_sbrk_r>
 8003228:	3001      	adds	r0, #1
 800322a:	d1f2      	bne.n	8003212 <sbrk_aligned+0x22>
 800322c:	e7ef      	b.n	800320e <sbrk_aligned+0x1e>
 800322e:	bf00      	nop
 8003230:	20000274 	.word	0x20000274

08003234 <_malloc_r>:
 8003234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003238:	1ccd      	adds	r5, r1, #3
 800323a:	f025 0503 	bic.w	r5, r5, #3
 800323e:	3508      	adds	r5, #8
 8003240:	2d0c      	cmp	r5, #12
 8003242:	bf38      	it	cc
 8003244:	250c      	movcc	r5, #12
 8003246:	2d00      	cmp	r5, #0
 8003248:	4606      	mov	r6, r0
 800324a:	db01      	blt.n	8003250 <_malloc_r+0x1c>
 800324c:	42a9      	cmp	r1, r5
 800324e:	d904      	bls.n	800325a <_malloc_r+0x26>
 8003250:	230c      	movs	r3, #12
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	2000      	movs	r0, #0
 8003256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800325a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003330 <_malloc_r+0xfc>
 800325e:	f000 f869 	bl	8003334 <__malloc_lock>
 8003262:	f8d8 3000 	ldr.w	r3, [r8]
 8003266:	461c      	mov	r4, r3
 8003268:	bb44      	cbnz	r4, 80032bc <_malloc_r+0x88>
 800326a:	4629      	mov	r1, r5
 800326c:	4630      	mov	r0, r6
 800326e:	f7ff ffbf 	bl	80031f0 <sbrk_aligned>
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	4604      	mov	r4, r0
 8003276:	d158      	bne.n	800332a <_malloc_r+0xf6>
 8003278:	f8d8 4000 	ldr.w	r4, [r8]
 800327c:	4627      	mov	r7, r4
 800327e:	2f00      	cmp	r7, #0
 8003280:	d143      	bne.n	800330a <_malloc_r+0xd6>
 8003282:	2c00      	cmp	r4, #0
 8003284:	d04b      	beq.n	800331e <_malloc_r+0xea>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	4639      	mov	r1, r7
 800328a:	4630      	mov	r0, r6
 800328c:	eb04 0903 	add.w	r9, r4, r3
 8003290:	f000 fb5c 	bl	800394c <_sbrk_r>
 8003294:	4581      	cmp	r9, r0
 8003296:	d142      	bne.n	800331e <_malloc_r+0xea>
 8003298:	6821      	ldr	r1, [r4, #0]
 800329a:	1a6d      	subs	r5, r5, r1
 800329c:	4629      	mov	r1, r5
 800329e:	4630      	mov	r0, r6
 80032a0:	f7ff ffa6 	bl	80031f0 <sbrk_aligned>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d03a      	beq.n	800331e <_malloc_r+0xea>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	442b      	add	r3, r5
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	f8d8 3000 	ldr.w	r3, [r8]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	bb62      	cbnz	r2, 8003310 <_malloc_r+0xdc>
 80032b6:	f8c8 7000 	str.w	r7, [r8]
 80032ba:	e00f      	b.n	80032dc <_malloc_r+0xa8>
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	1b52      	subs	r2, r2, r5
 80032c0:	d420      	bmi.n	8003304 <_malloc_r+0xd0>
 80032c2:	2a0b      	cmp	r2, #11
 80032c4:	d917      	bls.n	80032f6 <_malloc_r+0xc2>
 80032c6:	1961      	adds	r1, r4, r5
 80032c8:	42a3      	cmp	r3, r4
 80032ca:	6025      	str	r5, [r4, #0]
 80032cc:	bf18      	it	ne
 80032ce:	6059      	strne	r1, [r3, #4]
 80032d0:	6863      	ldr	r3, [r4, #4]
 80032d2:	bf08      	it	eq
 80032d4:	f8c8 1000 	streq.w	r1, [r8]
 80032d8:	5162      	str	r2, [r4, r5]
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	4630      	mov	r0, r6
 80032de:	f000 f82f 	bl	8003340 <__malloc_unlock>
 80032e2:	f104 000b 	add.w	r0, r4, #11
 80032e6:	1d23      	adds	r3, r4, #4
 80032e8:	f020 0007 	bic.w	r0, r0, #7
 80032ec:	1ac2      	subs	r2, r0, r3
 80032ee:	bf1c      	itt	ne
 80032f0:	1a1b      	subne	r3, r3, r0
 80032f2:	50a3      	strne	r3, [r4, r2]
 80032f4:	e7af      	b.n	8003256 <_malloc_r+0x22>
 80032f6:	6862      	ldr	r2, [r4, #4]
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	bf0c      	ite	eq
 80032fc:	f8c8 2000 	streq.w	r2, [r8]
 8003300:	605a      	strne	r2, [r3, #4]
 8003302:	e7eb      	b.n	80032dc <_malloc_r+0xa8>
 8003304:	4623      	mov	r3, r4
 8003306:	6864      	ldr	r4, [r4, #4]
 8003308:	e7ae      	b.n	8003268 <_malloc_r+0x34>
 800330a:	463c      	mov	r4, r7
 800330c:	687f      	ldr	r7, [r7, #4]
 800330e:	e7b6      	b.n	800327e <_malloc_r+0x4a>
 8003310:	461a      	mov	r2, r3
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	42a3      	cmp	r3, r4
 8003316:	d1fb      	bne.n	8003310 <_malloc_r+0xdc>
 8003318:	2300      	movs	r3, #0
 800331a:	6053      	str	r3, [r2, #4]
 800331c:	e7de      	b.n	80032dc <_malloc_r+0xa8>
 800331e:	230c      	movs	r3, #12
 8003320:	6033      	str	r3, [r6, #0]
 8003322:	4630      	mov	r0, r6
 8003324:	f000 f80c 	bl	8003340 <__malloc_unlock>
 8003328:	e794      	b.n	8003254 <_malloc_r+0x20>
 800332a:	6005      	str	r5, [r0, #0]
 800332c:	e7d6      	b.n	80032dc <_malloc_r+0xa8>
 800332e:	bf00      	nop
 8003330:	20000278 	.word	0x20000278

08003334 <__malloc_lock>:
 8003334:	4801      	ldr	r0, [pc, #4]	@ (800333c <__malloc_lock+0x8>)
 8003336:	f7ff bf0f 	b.w	8003158 <__retarget_lock_acquire_recursive>
 800333a:	bf00      	nop
 800333c:	20000270 	.word	0x20000270

08003340 <__malloc_unlock>:
 8003340:	4801      	ldr	r0, [pc, #4]	@ (8003348 <__malloc_unlock+0x8>)
 8003342:	f7ff bf0a 	b.w	800315a <__retarget_lock_release_recursive>
 8003346:	bf00      	nop
 8003348:	20000270 	.word	0x20000270

0800334c <__ssputs_r>:
 800334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	688e      	ldr	r6, [r1, #8]
 8003352:	461f      	mov	r7, r3
 8003354:	42be      	cmp	r6, r7
 8003356:	680b      	ldr	r3, [r1, #0]
 8003358:	4682      	mov	sl, r0
 800335a:	460c      	mov	r4, r1
 800335c:	4690      	mov	r8, r2
 800335e:	d82d      	bhi.n	80033bc <__ssputs_r+0x70>
 8003360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003368:	d026      	beq.n	80033b8 <__ssputs_r+0x6c>
 800336a:	6965      	ldr	r5, [r4, #20]
 800336c:	6909      	ldr	r1, [r1, #16]
 800336e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003372:	eba3 0901 	sub.w	r9, r3, r1
 8003376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800337a:	1c7b      	adds	r3, r7, #1
 800337c:	444b      	add	r3, r9
 800337e:	106d      	asrs	r5, r5, #1
 8003380:	429d      	cmp	r5, r3
 8003382:	bf38      	it	cc
 8003384:	461d      	movcc	r5, r3
 8003386:	0553      	lsls	r3, r2, #21
 8003388:	d527      	bpl.n	80033da <__ssputs_r+0x8e>
 800338a:	4629      	mov	r1, r5
 800338c:	f7ff ff52 	bl	8003234 <_malloc_r>
 8003390:	4606      	mov	r6, r0
 8003392:	b360      	cbz	r0, 80033ee <__ssputs_r+0xa2>
 8003394:	6921      	ldr	r1, [r4, #16]
 8003396:	464a      	mov	r2, r9
 8003398:	f000 fae8 	bl	800396c <memcpy>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80033a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	6126      	str	r6, [r4, #16]
 80033aa:	6165      	str	r5, [r4, #20]
 80033ac:	444e      	add	r6, r9
 80033ae:	eba5 0509 	sub.w	r5, r5, r9
 80033b2:	6026      	str	r6, [r4, #0]
 80033b4:	60a5      	str	r5, [r4, #8]
 80033b6:	463e      	mov	r6, r7
 80033b8:	42be      	cmp	r6, r7
 80033ba:	d900      	bls.n	80033be <__ssputs_r+0x72>
 80033bc:	463e      	mov	r6, r7
 80033be:	6820      	ldr	r0, [r4, #0]
 80033c0:	4632      	mov	r2, r6
 80033c2:	4641      	mov	r1, r8
 80033c4:	f000 faa8 	bl	8003918 <memmove>
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	1b9b      	subs	r3, r3, r6
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	4433      	add	r3, r6
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	2000      	movs	r0, #0
 80033d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033da:	462a      	mov	r2, r5
 80033dc:	f000 fad4 	bl	8003988 <_realloc_r>
 80033e0:	4606      	mov	r6, r0
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d1e0      	bne.n	80033a8 <__ssputs_r+0x5c>
 80033e6:	6921      	ldr	r1, [r4, #16]
 80033e8:	4650      	mov	r0, sl
 80033ea:	f7ff feb7 	bl	800315c <_free_r>
 80033ee:	230c      	movs	r3, #12
 80033f0:	f8ca 3000 	str.w	r3, [sl]
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	e7e9      	b.n	80033d6 <__ssputs_r+0x8a>
	...

08003404 <_svfiprintf_r>:
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	4698      	mov	r8, r3
 800340a:	898b      	ldrh	r3, [r1, #12]
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	b09d      	sub	sp, #116	@ 0x74
 8003410:	4607      	mov	r7, r0
 8003412:	460d      	mov	r5, r1
 8003414:	4614      	mov	r4, r2
 8003416:	d510      	bpl.n	800343a <_svfiprintf_r+0x36>
 8003418:	690b      	ldr	r3, [r1, #16]
 800341a:	b973      	cbnz	r3, 800343a <_svfiprintf_r+0x36>
 800341c:	2140      	movs	r1, #64	@ 0x40
 800341e:	f7ff ff09 	bl	8003234 <_malloc_r>
 8003422:	6028      	str	r0, [r5, #0]
 8003424:	6128      	str	r0, [r5, #16]
 8003426:	b930      	cbnz	r0, 8003436 <_svfiprintf_r+0x32>
 8003428:	230c      	movs	r3, #12
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	b01d      	add	sp, #116	@ 0x74
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003436:	2340      	movs	r3, #64	@ 0x40
 8003438:	616b      	str	r3, [r5, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	9309      	str	r3, [sp, #36]	@ 0x24
 800343e:	2320      	movs	r3, #32
 8003440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003444:	f8cd 800c 	str.w	r8, [sp, #12]
 8003448:	2330      	movs	r3, #48	@ 0x30
 800344a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80035e8 <_svfiprintf_r+0x1e4>
 800344e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003452:	f04f 0901 	mov.w	r9, #1
 8003456:	4623      	mov	r3, r4
 8003458:	469a      	mov	sl, r3
 800345a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800345e:	b10a      	cbz	r2, 8003464 <_svfiprintf_r+0x60>
 8003460:	2a25      	cmp	r2, #37	@ 0x25
 8003462:	d1f9      	bne.n	8003458 <_svfiprintf_r+0x54>
 8003464:	ebba 0b04 	subs.w	fp, sl, r4
 8003468:	d00b      	beq.n	8003482 <_svfiprintf_r+0x7e>
 800346a:	465b      	mov	r3, fp
 800346c:	4622      	mov	r2, r4
 800346e:	4629      	mov	r1, r5
 8003470:	4638      	mov	r0, r7
 8003472:	f7ff ff6b 	bl	800334c <__ssputs_r>
 8003476:	3001      	adds	r0, #1
 8003478:	f000 80a7 	beq.w	80035ca <_svfiprintf_r+0x1c6>
 800347c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800347e:	445a      	add	r2, fp
 8003480:	9209      	str	r2, [sp, #36]	@ 0x24
 8003482:	f89a 3000 	ldrb.w	r3, [sl]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 809f 	beq.w	80035ca <_svfiprintf_r+0x1c6>
 800348c:	2300      	movs	r3, #0
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003496:	f10a 0a01 	add.w	sl, sl, #1
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	9307      	str	r3, [sp, #28]
 800349e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80034a4:	4654      	mov	r4, sl
 80034a6:	2205      	movs	r2, #5
 80034a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ac:	484e      	ldr	r0, [pc, #312]	@ (80035e8 <_svfiprintf_r+0x1e4>)
 80034ae:	f7fc feaf 	bl	8000210 <memchr>
 80034b2:	9a04      	ldr	r2, [sp, #16]
 80034b4:	b9d8      	cbnz	r0, 80034ee <_svfiprintf_r+0xea>
 80034b6:	06d0      	lsls	r0, r2, #27
 80034b8:	bf44      	itt	mi
 80034ba:	2320      	movmi	r3, #32
 80034bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034c0:	0711      	lsls	r1, r2, #28
 80034c2:	bf44      	itt	mi
 80034c4:	232b      	movmi	r3, #43	@ 0x2b
 80034c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034ca:	f89a 3000 	ldrb.w	r3, [sl]
 80034ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80034d0:	d015      	beq.n	80034fe <_svfiprintf_r+0xfa>
 80034d2:	9a07      	ldr	r2, [sp, #28]
 80034d4:	4654      	mov	r4, sl
 80034d6:	2000      	movs	r0, #0
 80034d8:	f04f 0c0a 	mov.w	ip, #10
 80034dc:	4621      	mov	r1, r4
 80034de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e2:	3b30      	subs	r3, #48	@ 0x30
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d94b      	bls.n	8003580 <_svfiprintf_r+0x17c>
 80034e8:	b1b0      	cbz	r0, 8003518 <_svfiprintf_r+0x114>
 80034ea:	9207      	str	r2, [sp, #28]
 80034ec:	e014      	b.n	8003518 <_svfiprintf_r+0x114>
 80034ee:	eba0 0308 	sub.w	r3, r0, r8
 80034f2:	fa09 f303 	lsl.w	r3, r9, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	9304      	str	r3, [sp, #16]
 80034fa:	46a2      	mov	sl, r4
 80034fc:	e7d2      	b.n	80034a4 <_svfiprintf_r+0xa0>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	1d19      	adds	r1, r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9103      	str	r1, [sp, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfbb      	ittet	lt
 800350a:	425b      	neglt	r3, r3
 800350c:	f042 0202 	orrlt.w	r2, r2, #2
 8003510:	9307      	strge	r3, [sp, #28]
 8003512:	9307      	strlt	r3, [sp, #28]
 8003514:	bfb8      	it	lt
 8003516:	9204      	strlt	r2, [sp, #16]
 8003518:	7823      	ldrb	r3, [r4, #0]
 800351a:	2b2e      	cmp	r3, #46	@ 0x2e
 800351c:	d10a      	bne.n	8003534 <_svfiprintf_r+0x130>
 800351e:	7863      	ldrb	r3, [r4, #1]
 8003520:	2b2a      	cmp	r3, #42	@ 0x2a
 8003522:	d132      	bne.n	800358a <_svfiprintf_r+0x186>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	9203      	str	r2, [sp, #12]
 800352c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003530:	3402      	adds	r4, #2
 8003532:	9305      	str	r3, [sp, #20]
 8003534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80035f8 <_svfiprintf_r+0x1f4>
 8003538:	7821      	ldrb	r1, [r4, #0]
 800353a:	2203      	movs	r2, #3
 800353c:	4650      	mov	r0, sl
 800353e:	f7fc fe67 	bl	8000210 <memchr>
 8003542:	b138      	cbz	r0, 8003554 <_svfiprintf_r+0x150>
 8003544:	9b04      	ldr	r3, [sp, #16]
 8003546:	eba0 000a 	sub.w	r0, r0, sl
 800354a:	2240      	movs	r2, #64	@ 0x40
 800354c:	4082      	lsls	r2, r0
 800354e:	4313      	orrs	r3, r2
 8003550:	3401      	adds	r4, #1
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003558:	4824      	ldr	r0, [pc, #144]	@ (80035ec <_svfiprintf_r+0x1e8>)
 800355a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800355e:	2206      	movs	r2, #6
 8003560:	f7fc fe56 	bl	8000210 <memchr>
 8003564:	2800      	cmp	r0, #0
 8003566:	d036      	beq.n	80035d6 <_svfiprintf_r+0x1d2>
 8003568:	4b21      	ldr	r3, [pc, #132]	@ (80035f0 <_svfiprintf_r+0x1ec>)
 800356a:	bb1b      	cbnz	r3, 80035b4 <_svfiprintf_r+0x1b0>
 800356c:	9b03      	ldr	r3, [sp, #12]
 800356e:	3307      	adds	r3, #7
 8003570:	f023 0307 	bic.w	r3, r3, #7
 8003574:	3308      	adds	r3, #8
 8003576:	9303      	str	r3, [sp, #12]
 8003578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800357a:	4433      	add	r3, r6
 800357c:	9309      	str	r3, [sp, #36]	@ 0x24
 800357e:	e76a      	b.n	8003456 <_svfiprintf_r+0x52>
 8003580:	fb0c 3202 	mla	r2, ip, r2, r3
 8003584:	460c      	mov	r4, r1
 8003586:	2001      	movs	r0, #1
 8003588:	e7a8      	b.n	80034dc <_svfiprintf_r+0xd8>
 800358a:	2300      	movs	r3, #0
 800358c:	3401      	adds	r4, #1
 800358e:	9305      	str	r3, [sp, #20]
 8003590:	4619      	mov	r1, r3
 8003592:	f04f 0c0a 	mov.w	ip, #10
 8003596:	4620      	mov	r0, r4
 8003598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800359c:	3a30      	subs	r2, #48	@ 0x30
 800359e:	2a09      	cmp	r2, #9
 80035a0:	d903      	bls.n	80035aa <_svfiprintf_r+0x1a6>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0c6      	beq.n	8003534 <_svfiprintf_r+0x130>
 80035a6:	9105      	str	r1, [sp, #20]
 80035a8:	e7c4      	b.n	8003534 <_svfiprintf_r+0x130>
 80035aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80035ae:	4604      	mov	r4, r0
 80035b0:	2301      	movs	r3, #1
 80035b2:	e7f0      	b.n	8003596 <_svfiprintf_r+0x192>
 80035b4:	ab03      	add	r3, sp, #12
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	462a      	mov	r2, r5
 80035ba:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <_svfiprintf_r+0x1f0>)
 80035bc:	a904      	add	r1, sp, #16
 80035be:	4638      	mov	r0, r7
 80035c0:	f3af 8000 	nop.w
 80035c4:	1c42      	adds	r2, r0, #1
 80035c6:	4606      	mov	r6, r0
 80035c8:	d1d6      	bne.n	8003578 <_svfiprintf_r+0x174>
 80035ca:	89ab      	ldrh	r3, [r5, #12]
 80035cc:	065b      	lsls	r3, r3, #25
 80035ce:	f53f af2d 	bmi.w	800342c <_svfiprintf_r+0x28>
 80035d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035d4:	e72c      	b.n	8003430 <_svfiprintf_r+0x2c>
 80035d6:	ab03      	add	r3, sp, #12
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	462a      	mov	r2, r5
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <_svfiprintf_r+0x1f0>)
 80035de:	a904      	add	r1, sp, #16
 80035e0:	4638      	mov	r0, r7
 80035e2:	f000 f879 	bl	80036d8 <_printf_i>
 80035e6:	e7ed      	b.n	80035c4 <_svfiprintf_r+0x1c0>
 80035e8:	08003c8c 	.word	0x08003c8c
 80035ec:	08003c96 	.word	0x08003c96
 80035f0:	00000000 	.word	0x00000000
 80035f4:	0800334d 	.word	0x0800334d
 80035f8:	08003c92 	.word	0x08003c92

080035fc <_printf_common>:
 80035fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	4616      	mov	r6, r2
 8003602:	4698      	mov	r8, r3
 8003604:	688a      	ldr	r2, [r1, #8]
 8003606:	690b      	ldr	r3, [r1, #16]
 8003608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800360c:	4293      	cmp	r3, r2
 800360e:	bfb8      	it	lt
 8003610:	4613      	movlt	r3, r2
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003618:	4607      	mov	r7, r0
 800361a:	460c      	mov	r4, r1
 800361c:	b10a      	cbz	r2, 8003622 <_printf_common+0x26>
 800361e:	3301      	adds	r3, #1
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	0699      	lsls	r1, r3, #26
 8003626:	bf42      	ittt	mi
 8003628:	6833      	ldrmi	r3, [r6, #0]
 800362a:	3302      	addmi	r3, #2
 800362c:	6033      	strmi	r3, [r6, #0]
 800362e:	6825      	ldr	r5, [r4, #0]
 8003630:	f015 0506 	ands.w	r5, r5, #6
 8003634:	d106      	bne.n	8003644 <_printf_common+0x48>
 8003636:	f104 0a19 	add.w	sl, r4, #25
 800363a:	68e3      	ldr	r3, [r4, #12]
 800363c:	6832      	ldr	r2, [r6, #0]
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	42ab      	cmp	r3, r5
 8003642:	dc26      	bgt.n	8003692 <_printf_common+0x96>
 8003644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003648:	6822      	ldr	r2, [r4, #0]
 800364a:	3b00      	subs	r3, #0
 800364c:	bf18      	it	ne
 800364e:	2301      	movne	r3, #1
 8003650:	0692      	lsls	r2, r2, #26
 8003652:	d42b      	bmi.n	80036ac <_printf_common+0xb0>
 8003654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003658:	4641      	mov	r1, r8
 800365a:	4638      	mov	r0, r7
 800365c:	47c8      	blx	r9
 800365e:	3001      	adds	r0, #1
 8003660:	d01e      	beq.n	80036a0 <_printf_common+0xa4>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	6922      	ldr	r2, [r4, #16]
 8003666:	f003 0306 	and.w	r3, r3, #6
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf02      	ittt	eq
 800366e:	68e5      	ldreq	r5, [r4, #12]
 8003670:	6833      	ldreq	r3, [r6, #0]
 8003672:	1aed      	subeq	r5, r5, r3
 8003674:	68a3      	ldr	r3, [r4, #8]
 8003676:	bf0c      	ite	eq
 8003678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800367c:	2500      	movne	r5, #0
 800367e:	4293      	cmp	r3, r2
 8003680:	bfc4      	itt	gt
 8003682:	1a9b      	subgt	r3, r3, r2
 8003684:	18ed      	addgt	r5, r5, r3
 8003686:	2600      	movs	r6, #0
 8003688:	341a      	adds	r4, #26
 800368a:	42b5      	cmp	r5, r6
 800368c:	d11a      	bne.n	80036c4 <_printf_common+0xc8>
 800368e:	2000      	movs	r0, #0
 8003690:	e008      	b.n	80036a4 <_printf_common+0xa8>
 8003692:	2301      	movs	r3, #1
 8003694:	4652      	mov	r2, sl
 8003696:	4641      	mov	r1, r8
 8003698:	4638      	mov	r0, r7
 800369a:	47c8      	blx	r9
 800369c:	3001      	adds	r0, #1
 800369e:	d103      	bne.n	80036a8 <_printf_common+0xac>
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	3501      	adds	r5, #1
 80036aa:	e7c6      	b.n	800363a <_printf_common+0x3e>
 80036ac:	18e1      	adds	r1, r4, r3
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	2030      	movs	r0, #48	@ 0x30
 80036b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036b6:	4422      	add	r2, r4
 80036b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036c0:	3302      	adds	r3, #2
 80036c2:	e7c7      	b.n	8003654 <_printf_common+0x58>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4622      	mov	r2, r4
 80036c8:	4641      	mov	r1, r8
 80036ca:	4638      	mov	r0, r7
 80036cc:	47c8      	blx	r9
 80036ce:	3001      	adds	r0, #1
 80036d0:	d0e6      	beq.n	80036a0 <_printf_common+0xa4>
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7d9      	b.n	800368a <_printf_common+0x8e>
	...

080036d8 <_printf_i>:
 80036d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	7e0f      	ldrb	r7, [r1, #24]
 80036de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036e0:	2f78      	cmp	r7, #120	@ 0x78
 80036e2:	4691      	mov	r9, r2
 80036e4:	4680      	mov	r8, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	469a      	mov	sl, r3
 80036ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036ee:	d807      	bhi.n	8003700 <_printf_i+0x28>
 80036f0:	2f62      	cmp	r7, #98	@ 0x62
 80036f2:	d80a      	bhi.n	800370a <_printf_i+0x32>
 80036f4:	2f00      	cmp	r7, #0
 80036f6:	f000 80d2 	beq.w	800389e <_printf_i+0x1c6>
 80036fa:	2f58      	cmp	r7, #88	@ 0x58
 80036fc:	f000 80b9 	beq.w	8003872 <_printf_i+0x19a>
 8003700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003708:	e03a      	b.n	8003780 <_printf_i+0xa8>
 800370a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800370e:	2b15      	cmp	r3, #21
 8003710:	d8f6      	bhi.n	8003700 <_printf_i+0x28>
 8003712:	a101      	add	r1, pc, #4	@ (adr r1, 8003718 <_printf_i+0x40>)
 8003714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003718:	08003771 	.word	0x08003771
 800371c:	08003785 	.word	0x08003785
 8003720:	08003701 	.word	0x08003701
 8003724:	08003701 	.word	0x08003701
 8003728:	08003701 	.word	0x08003701
 800372c:	08003701 	.word	0x08003701
 8003730:	08003785 	.word	0x08003785
 8003734:	08003701 	.word	0x08003701
 8003738:	08003701 	.word	0x08003701
 800373c:	08003701 	.word	0x08003701
 8003740:	08003701 	.word	0x08003701
 8003744:	08003885 	.word	0x08003885
 8003748:	080037af 	.word	0x080037af
 800374c:	0800383f 	.word	0x0800383f
 8003750:	08003701 	.word	0x08003701
 8003754:	08003701 	.word	0x08003701
 8003758:	080038a7 	.word	0x080038a7
 800375c:	08003701 	.word	0x08003701
 8003760:	080037af 	.word	0x080037af
 8003764:	08003701 	.word	0x08003701
 8003768:	08003701 	.word	0x08003701
 800376c:	08003847 	.word	0x08003847
 8003770:	6833      	ldr	r3, [r6, #0]
 8003772:	1d1a      	adds	r2, r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6032      	str	r2, [r6, #0]
 8003778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800377c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003780:	2301      	movs	r3, #1
 8003782:	e09d      	b.n	80038c0 <_printf_i+0x1e8>
 8003784:	6833      	ldr	r3, [r6, #0]
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	1d19      	adds	r1, r3, #4
 800378a:	6031      	str	r1, [r6, #0]
 800378c:	0606      	lsls	r6, r0, #24
 800378e:	d501      	bpl.n	8003794 <_printf_i+0xbc>
 8003790:	681d      	ldr	r5, [r3, #0]
 8003792:	e003      	b.n	800379c <_printf_i+0xc4>
 8003794:	0645      	lsls	r5, r0, #25
 8003796:	d5fb      	bpl.n	8003790 <_printf_i+0xb8>
 8003798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800379c:	2d00      	cmp	r5, #0
 800379e:	da03      	bge.n	80037a8 <_printf_i+0xd0>
 80037a0:	232d      	movs	r3, #45	@ 0x2d
 80037a2:	426d      	negs	r5, r5
 80037a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037a8:	4859      	ldr	r0, [pc, #356]	@ (8003910 <_printf_i+0x238>)
 80037aa:	230a      	movs	r3, #10
 80037ac:	e011      	b.n	80037d2 <_printf_i+0xfa>
 80037ae:	6821      	ldr	r1, [r4, #0]
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	0608      	lsls	r0, r1, #24
 80037b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80037b8:	d402      	bmi.n	80037c0 <_printf_i+0xe8>
 80037ba:	0649      	lsls	r1, r1, #25
 80037bc:	bf48      	it	mi
 80037be:	b2ad      	uxthmi	r5, r5
 80037c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80037c2:	4853      	ldr	r0, [pc, #332]	@ (8003910 <_printf_i+0x238>)
 80037c4:	6033      	str	r3, [r6, #0]
 80037c6:	bf14      	ite	ne
 80037c8:	230a      	movne	r3, #10
 80037ca:	2308      	moveq	r3, #8
 80037cc:	2100      	movs	r1, #0
 80037ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037d2:	6866      	ldr	r6, [r4, #4]
 80037d4:	60a6      	str	r6, [r4, #8]
 80037d6:	2e00      	cmp	r6, #0
 80037d8:	bfa2      	ittt	ge
 80037da:	6821      	ldrge	r1, [r4, #0]
 80037dc:	f021 0104 	bicge.w	r1, r1, #4
 80037e0:	6021      	strge	r1, [r4, #0]
 80037e2:	b90d      	cbnz	r5, 80037e8 <_printf_i+0x110>
 80037e4:	2e00      	cmp	r6, #0
 80037e6:	d04b      	beq.n	8003880 <_printf_i+0x1a8>
 80037e8:	4616      	mov	r6, r2
 80037ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ee:	fb03 5711 	mls	r7, r3, r1, r5
 80037f2:	5dc7      	ldrb	r7, [r0, r7]
 80037f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f8:	462f      	mov	r7, r5
 80037fa:	42bb      	cmp	r3, r7
 80037fc:	460d      	mov	r5, r1
 80037fe:	d9f4      	bls.n	80037ea <_printf_i+0x112>
 8003800:	2b08      	cmp	r3, #8
 8003802:	d10b      	bne.n	800381c <_printf_i+0x144>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	07df      	lsls	r7, r3, #31
 8003808:	d508      	bpl.n	800381c <_printf_i+0x144>
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	6861      	ldr	r1, [r4, #4]
 800380e:	4299      	cmp	r1, r3
 8003810:	bfde      	ittt	le
 8003812:	2330      	movle	r3, #48	@ 0x30
 8003814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800381c:	1b92      	subs	r2, r2, r6
 800381e:	6122      	str	r2, [r4, #16]
 8003820:	f8cd a000 	str.w	sl, [sp]
 8003824:	464b      	mov	r3, r9
 8003826:	aa03      	add	r2, sp, #12
 8003828:	4621      	mov	r1, r4
 800382a:	4640      	mov	r0, r8
 800382c:	f7ff fee6 	bl	80035fc <_printf_common>
 8003830:	3001      	adds	r0, #1
 8003832:	d14a      	bne.n	80038ca <_printf_i+0x1f2>
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	b004      	add	sp, #16
 800383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	f043 0320 	orr.w	r3, r3, #32
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	4833      	ldr	r0, [pc, #204]	@ (8003914 <_printf_i+0x23c>)
 8003848:	2778      	movs	r7, #120	@ 0x78
 800384a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	6831      	ldr	r1, [r6, #0]
 8003852:	061f      	lsls	r7, r3, #24
 8003854:	f851 5b04 	ldr.w	r5, [r1], #4
 8003858:	d402      	bmi.n	8003860 <_printf_i+0x188>
 800385a:	065f      	lsls	r7, r3, #25
 800385c:	bf48      	it	mi
 800385e:	b2ad      	uxthmi	r5, r5
 8003860:	6031      	str	r1, [r6, #0]
 8003862:	07d9      	lsls	r1, r3, #31
 8003864:	bf44      	itt	mi
 8003866:	f043 0320 	orrmi.w	r3, r3, #32
 800386a:	6023      	strmi	r3, [r4, #0]
 800386c:	b11d      	cbz	r5, 8003876 <_printf_i+0x19e>
 800386e:	2310      	movs	r3, #16
 8003870:	e7ac      	b.n	80037cc <_printf_i+0xf4>
 8003872:	4827      	ldr	r0, [pc, #156]	@ (8003910 <_printf_i+0x238>)
 8003874:	e7e9      	b.n	800384a <_printf_i+0x172>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	f023 0320 	bic.w	r3, r3, #32
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	e7f6      	b.n	800386e <_printf_i+0x196>
 8003880:	4616      	mov	r6, r2
 8003882:	e7bd      	b.n	8003800 <_printf_i+0x128>
 8003884:	6833      	ldr	r3, [r6, #0]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	6961      	ldr	r1, [r4, #20]
 800388a:	1d18      	adds	r0, r3, #4
 800388c:	6030      	str	r0, [r6, #0]
 800388e:	062e      	lsls	r6, r5, #24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	d501      	bpl.n	8003898 <_printf_i+0x1c0>
 8003894:	6019      	str	r1, [r3, #0]
 8003896:	e002      	b.n	800389e <_printf_i+0x1c6>
 8003898:	0668      	lsls	r0, r5, #25
 800389a:	d5fb      	bpl.n	8003894 <_printf_i+0x1bc>
 800389c:	8019      	strh	r1, [r3, #0]
 800389e:	2300      	movs	r3, #0
 80038a0:	6123      	str	r3, [r4, #16]
 80038a2:	4616      	mov	r6, r2
 80038a4:	e7bc      	b.n	8003820 <_printf_i+0x148>
 80038a6:	6833      	ldr	r3, [r6, #0]
 80038a8:	1d1a      	adds	r2, r3, #4
 80038aa:	6032      	str	r2, [r6, #0]
 80038ac:	681e      	ldr	r6, [r3, #0]
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	2100      	movs	r1, #0
 80038b2:	4630      	mov	r0, r6
 80038b4:	f7fc fcac 	bl	8000210 <memchr>
 80038b8:	b108      	cbz	r0, 80038be <_printf_i+0x1e6>
 80038ba:	1b80      	subs	r0, r0, r6
 80038bc:	6060      	str	r0, [r4, #4]
 80038be:	6863      	ldr	r3, [r4, #4]
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	2300      	movs	r3, #0
 80038c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038c8:	e7aa      	b.n	8003820 <_printf_i+0x148>
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	4632      	mov	r2, r6
 80038ce:	4649      	mov	r1, r9
 80038d0:	4640      	mov	r0, r8
 80038d2:	47d0      	blx	sl
 80038d4:	3001      	adds	r0, #1
 80038d6:	d0ad      	beq.n	8003834 <_printf_i+0x15c>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	079b      	lsls	r3, r3, #30
 80038dc:	d413      	bmi.n	8003906 <_printf_i+0x22e>
 80038de:	68e0      	ldr	r0, [r4, #12]
 80038e0:	9b03      	ldr	r3, [sp, #12]
 80038e2:	4298      	cmp	r0, r3
 80038e4:	bfb8      	it	lt
 80038e6:	4618      	movlt	r0, r3
 80038e8:	e7a6      	b.n	8003838 <_printf_i+0x160>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4632      	mov	r2, r6
 80038ee:	4649      	mov	r1, r9
 80038f0:	4640      	mov	r0, r8
 80038f2:	47d0      	blx	sl
 80038f4:	3001      	adds	r0, #1
 80038f6:	d09d      	beq.n	8003834 <_printf_i+0x15c>
 80038f8:	3501      	adds	r5, #1
 80038fa:	68e3      	ldr	r3, [r4, #12]
 80038fc:	9903      	ldr	r1, [sp, #12]
 80038fe:	1a5b      	subs	r3, r3, r1
 8003900:	42ab      	cmp	r3, r5
 8003902:	dcf2      	bgt.n	80038ea <_printf_i+0x212>
 8003904:	e7eb      	b.n	80038de <_printf_i+0x206>
 8003906:	2500      	movs	r5, #0
 8003908:	f104 0619 	add.w	r6, r4, #25
 800390c:	e7f5      	b.n	80038fa <_printf_i+0x222>
 800390e:	bf00      	nop
 8003910:	08003c9d 	.word	0x08003c9d
 8003914:	08003cae 	.word	0x08003cae

08003918 <memmove>:
 8003918:	4288      	cmp	r0, r1
 800391a:	b510      	push	{r4, lr}
 800391c:	eb01 0402 	add.w	r4, r1, r2
 8003920:	d902      	bls.n	8003928 <memmove+0x10>
 8003922:	4284      	cmp	r4, r0
 8003924:	4623      	mov	r3, r4
 8003926:	d807      	bhi.n	8003938 <memmove+0x20>
 8003928:	1e43      	subs	r3, r0, #1
 800392a:	42a1      	cmp	r1, r4
 800392c:	d008      	beq.n	8003940 <memmove+0x28>
 800392e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003936:	e7f8      	b.n	800392a <memmove+0x12>
 8003938:	4402      	add	r2, r0
 800393a:	4601      	mov	r1, r0
 800393c:	428a      	cmp	r2, r1
 800393e:	d100      	bne.n	8003942 <memmove+0x2a>
 8003940:	bd10      	pop	{r4, pc}
 8003942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800394a:	e7f7      	b.n	800393c <memmove+0x24>

0800394c <_sbrk_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d06      	ldr	r5, [pc, #24]	@ (8003968 <_sbrk_r+0x1c>)
 8003950:	2300      	movs	r3, #0
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	f7fd fe04 	bl	8001564 <_sbrk>
 800395c:	1c43      	adds	r3, r0, #1
 800395e:	d102      	bne.n	8003966 <_sbrk_r+0x1a>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	b103      	cbz	r3, 8003966 <_sbrk_r+0x1a>
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	bd38      	pop	{r3, r4, r5, pc}
 8003968:	2000026c 	.word	0x2000026c

0800396c <memcpy>:
 800396c:	440a      	add	r2, r1
 800396e:	4291      	cmp	r1, r2
 8003970:	f100 33ff 	add.w	r3, r0, #4294967295
 8003974:	d100      	bne.n	8003978 <memcpy+0xc>
 8003976:	4770      	bx	lr
 8003978:	b510      	push	{r4, lr}
 800397a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800397e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003982:	4291      	cmp	r1, r2
 8003984:	d1f9      	bne.n	800397a <memcpy+0xe>
 8003986:	bd10      	pop	{r4, pc}

08003988 <_realloc_r>:
 8003988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398c:	4680      	mov	r8, r0
 800398e:	4615      	mov	r5, r2
 8003990:	460c      	mov	r4, r1
 8003992:	b921      	cbnz	r1, 800399e <_realloc_r+0x16>
 8003994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003998:	4611      	mov	r1, r2
 800399a:	f7ff bc4b 	b.w	8003234 <_malloc_r>
 800399e:	b92a      	cbnz	r2, 80039ac <_realloc_r+0x24>
 80039a0:	f7ff fbdc 	bl	800315c <_free_r>
 80039a4:	2400      	movs	r4, #0
 80039a6:	4620      	mov	r0, r4
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ac:	f000 f81a 	bl	80039e4 <_malloc_usable_size_r>
 80039b0:	4285      	cmp	r5, r0
 80039b2:	4606      	mov	r6, r0
 80039b4:	d802      	bhi.n	80039bc <_realloc_r+0x34>
 80039b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039ba:	d8f4      	bhi.n	80039a6 <_realloc_r+0x1e>
 80039bc:	4629      	mov	r1, r5
 80039be:	4640      	mov	r0, r8
 80039c0:	f7ff fc38 	bl	8003234 <_malloc_r>
 80039c4:	4607      	mov	r7, r0
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d0ec      	beq.n	80039a4 <_realloc_r+0x1c>
 80039ca:	42b5      	cmp	r5, r6
 80039cc:	462a      	mov	r2, r5
 80039ce:	4621      	mov	r1, r4
 80039d0:	bf28      	it	cs
 80039d2:	4632      	movcs	r2, r6
 80039d4:	f7ff ffca 	bl	800396c <memcpy>
 80039d8:	4621      	mov	r1, r4
 80039da:	4640      	mov	r0, r8
 80039dc:	f7ff fbbe 	bl	800315c <_free_r>
 80039e0:	463c      	mov	r4, r7
 80039e2:	e7e0      	b.n	80039a6 <_realloc_r+0x1e>

080039e4 <_malloc_usable_size_r>:
 80039e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e8:	1f18      	subs	r0, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfbc      	itt	lt
 80039ee:	580b      	ldrlt	r3, [r1, r0]
 80039f0:	18c0      	addlt	r0, r0, r3
 80039f2:	4770      	bx	lr

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
