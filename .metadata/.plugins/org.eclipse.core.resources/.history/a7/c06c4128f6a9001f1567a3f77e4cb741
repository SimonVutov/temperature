/* USER CODE BEGIN PD */
// GPIO Pin for DHT22 data
#define DHT22_GPIO_PORT GPIOA
#define DHT22_GPIO_PIN GPIO_PIN_1

/* Timing definitions for DHT22 communication */
#define DHT22_START_SIGNAL_DELAY 18000   // Reduced from 20ms to 18ms for better reliability
#define DHT22_RESPONSE_TIMEOUT 200       // Increased timeout for more reliable detection
#define DHT22_BIT_THRESHOLD 28          // Threshold to distinguish between 0 and 1 (in microseconds)
#define DHT22_READ_ATTEMPTS 3           // Number of read attempts before giving up
/* USER CODE END PD */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
char uart_buf[100];
uint8_t uart_buf_len;
float temperature;
uint32_t error_count = 0;
uint32_t success_count = 0;
/* USER CODE END PV */

// ... (keep existing includes and other code) ...

int main(void) {
  /* Initialize the HAL Library */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  DWT_Delay_Init();

  // Send initial message
  uart_buf_len = sprintf(uart_buf, "DHT22 Temperature Reader Started\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

  /* Main Loop */
  while (1) {
    int read_result = -1;

    // Try multiple times to read the sensor
    for (int attempt = 0; attempt < DHT22_READ_ATTEMPTS && read_result != 0; attempt++) {
      if (attempt > 0) {
        HAL_Delay(1000); // Wait between attempts
      }
      read_result = DHT22_ReadTemperature(DHT22_GPIO_PORT, DHT22_GPIO_PIN, &temperature);
    }

    if (read_result == 0) {
      success_count++;
      uart_buf_len = sprintf(uart_buf, "[OK] Temp: %.1fÂ°C (S:%lu E:%lu)\r\n",
                            temperature, success_count, error_count);
    } else {
      error_count++;
      uart_buf_len = sprintf(uart_buf, "[ERR] Read failed (S:%lu E:%lu)\r\n",
                            success_count, error_count);
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    // Wait before next reading (DHT22 needs at least 2s between readings)
    HAL_Delay(2000);
  }
}

int DHT22_ReadTemperature(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, float *temperature) {
  uint8_t data[5] = {0};
  uint32_t time_us;
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  // Configure pin as output for start signal
  GPIO_InitStruct.Pin = GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Changed to HIGH speed
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);

  // Send start signal
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
  DWT_Delay_us(DHT22_START_SIGNAL_DELAY);

  // Pull up and wait for DHT22 response
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
  DWT_Delay_us(40);

  // Switch to input mode
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);

  // Wait for DHT22 to pull line low
  time_us = 0;
  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
    if (++time_us > DHT22_RESPONSE_TIMEOUT) return 1;
    DWT_Delay_us(1);
  }

  // Wait for DHT22 to pull line high
  time_us = 0;
  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
    if (++time_us > DHT22_RESPONSE_TIMEOUT) return 2;
    DWT_Delay_us(1);
  }

  // Wait for DHT22 to pull line low again
  time_us = 0;
  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
    if (++time_us > DHT22_RESPONSE_TIMEOUT) return 3;
    DWT_Delay_us(1);
  }

  // Read 40 bits of data
  for (int i = 0; i < 40; i++) {
    // Wait for rising edge
    time_us = 0;
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
      if (++time_us > DHT22_RESPONSE_TIMEOUT) return 4;
      DWT_Delay_us(1);
    }

    // Measure HIGH duration
    time_us = 0;
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
      if (++time_us > DHT22_RESPONSE_TIMEOUT) return 5;
      DWT_Delay_us(1);
    }

    // Store bit based on pulse duration
    data[i / 8] <<= 1;
    if (time_us > DHT22_BIT_THRESHOLD) {
      data[i / 8] |= 1;
    }
  }

  // Verify checksum
  if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    return 6;
  }

  // Convert temperature data
  int16_t raw_temp = ((data[2] & 0x7F) << 8) | data[3];
  *temperature = raw_temp / 10.0;
  if (data[2] & 0x80) {
    *temperature *= -1;
  }

  return 0;
}
