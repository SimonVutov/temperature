/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// GPIO Pin for DHT22 data
#define DHT22_GPIO_PORT GPIOA
#define DHT22_GPIO_PIN GPIO_PIN_1

/* Timing definitions for DHT22 communication */
#define DHT22_START_SIGNAL_DELAY 20000   // Delay in us (20ms for start signal)
#define DHT22_RESPONSE_TIMEOUT 100       // Timeout in us
#define DHT22_BIT_TIMEOUT 70             // Timeout for a single bit in us
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
char uart_buf[100]; // UART transmission buffer
uint8_t uart_buf_len;
float temperature;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void DWT_Delay_Init(void);
void DWT_Delay_us(uint32_t us);

/* USER CODE BEGIN PFP */
int DHT22_ReadTemperature(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, float *temperature);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
  /* Initialize the HAL Library */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  DWT_Delay_Init(); // Initialize microsecond delay

  /* Debugging Message */
  uart_buf_len = sprintf(uart_buf, "System Initialized. Starting DHT22 Communication...\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

  /* Main Loop */
  while (1) {
    // Attempt to read temperature from DHT22
    uart_buf_len = sprintf(uart_buf, "Attempting to read temperature from DHT22...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    if (DHT22_ReadTemperature(DHT22_GPIO_PORT, DHT22_GPIO_PIN, &temperature) == 0) {
      // Successfully read temperature
      uart_buf_len = sprintf(uart_buf, "Temperature: %.2f°C\r\n", temperature);
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
    } else {
      // Failed to read temperature
      uart_buf_len = sprintf(uart_buf, "Failed to read temperature\r\n");
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
    }

    // Wait 2 seconds before the next reading
    HAL_Delay(2000);
  }
}

/**
  * @brief Reads temperature from the DHT22 sensor using HAL GPIO.
  * @param GPIOx GPIO Port (e.g., GPIOA)
  * @param GPIO_Pin GPIO Pin (e.g., GPIO_PIN_1)
  * @param temperature Pointer to store the temperature value
  * @retval 0 if successful, 1 if there is an error
  */
int DHT22_ReadTemperature(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, float *temperature) {
    uint8_t data[5] = {0}; // Buffer to store 40 bits (5 bytes) of DHT22 data
    uint32_t time_us;

    // Step 1: Send Start Signal
    uart_buf_len = sprintf(uart_buf, "Step 1: Sending start signal to DHT22...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET); // Pull data pin low
    DWT_Delay_us(DHT22_START_SIGNAL_DELAY);            // Wait for at least 20ms
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);  // Pull data pin high
    DWT_Delay_us(40);                                  // Wait 40us

    // Step 2: Switch GPIO to input mode
    uart_buf_len = sprintf(uart_buf, "Step 2: Switching GPIO to input mode...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = GPIO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);

    // Step 3: Wait for DHT22 Response
    uart_buf_len = sprintf(uart_buf, "Step 3: Waiting for DHT22 response...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    time_us = 0;
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
        if (++time_us > DHT22_RESPONSE_TIMEOUT) {
            uart_buf_len = sprintf(uart_buf, "Error: Timeout waiting for DHT22 response.\r\n");
            HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
            return 1; // Timeout waiting for DHT22 response
        }
        DWT_Delay_us(1);
    }

    uart_buf_len = sprintf(uart_buf, "DHT22 response detected. Proceeding to read data...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    // Step 4: Read 40 bits (5 bytes) of data
    for (int i = 0; i < 40; i++) {
        // Wait for LOW signal
        while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
            DWT_Delay_us(1);
        }

        // Measure HIGH duration
        time_us = 0;
        while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
            time_us++;
            if (time_us > DHT22_BIT_TIMEOUT) {
                uart_buf_len = sprintf(uart_buf, "Error: Timeout waiting for bit %d.\r\n", i);
                HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
                return 1; // Timeout waiting for bit signal
            }
        }

        // If HIGH > 40us, it's a '1'
        data[i / 8] <<= 1;
        if (time_us > 40) { // Adjust the threshold as needed
            data[i / 8] |= 1;
        }

        uart_buf_len = sprintf(uart_buf, "Bit %d read successfully: %d\r\n", i, (data[i / 8] & 1));
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
    }

    // Step 5: Verify Checksum
    uart_buf_len = sprintf(uart_buf, "Step 5: Verifying checksum...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    if (data[4] != ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
        uart_buf_len = sprintf(uart_buf, "Error: Checksum mismatch.\r\n");
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
        return 1; // Checksum error
    }

    uart_buf_len = sprintf(uart_buf, "Checksum valid. Converting data to temperature...\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    // Step 6: Convert Data to Temperature
    *temperature = ((data[2] << 8) | (data[3] & 0x7F)) / 10.0;
    if (data[3] & 0x80) {
        *temperature *= -1; // Negative temperature
    }

    uart_buf_len = sprintf(uart_buf, "Temperature conversion complete: %.2f°C\r\n", *temperature);
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);

    return 0; // Success
}

/**
  * @brief DWT Delay Initialization
  */
void DWT_Delay_Init(void) {
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
        DWT->CYCCNT = 0;
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    }
}

/**
  * @brief Microsecond delay using DWT cycle counter
  */
void DWT_Delay_us(uint32_t us) {
    uint32_t start = DWT->CYCCNT;
    uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
    while ((DWT->CYCCNT - start) < ticks);
}

/**
  * @brief Error Handler
  */
void Error_Handler(void) {
    uart_buf_len = sprintf(uart_buf, "Critical Error Occurred!\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
    while (1); // Stay in an infinite loop
}
